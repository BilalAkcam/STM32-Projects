
Dynamic-Spider-Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ac4  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003c5c  08003c5c  00013c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c6c  08003c6c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08003c6c  08003c6c  00013c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c74  08003c74  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c74  08003c74  00013c74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c78  08003c78  00013c78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08003c7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  20000078  08003cf4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08003cf4  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009bc9  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a35  00000000  00000000  00029c71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b48  00000000  00000000  0002b6a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a60  00000000  00000000  0002c1f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000154c5  00000000  00000000  0002cc50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b066  00000000  00000000  00042115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088526  00000000  00000000  0004d17b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d56a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f68  00000000  00000000  000d56f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000078 	.word	0x20000078
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003c44 	.word	0x08003c44

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000007c 	.word	0x2000007c
 80001d4:	08003c44 	.word	0x08003c44

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	; 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	; 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__aeabi_d2iz>:
 80007a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007ac:	d215      	bcs.n	80007da <__aeabi_d2iz+0x36>
 80007ae:	d511      	bpl.n	80007d4 <__aeabi_d2iz+0x30>
 80007b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007b8:	d912      	bls.n	80007e0 <__aeabi_d2iz+0x3c>
 80007ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007c6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80007ca:	fa23 f002 	lsr.w	r0, r3, r2
 80007ce:	bf18      	it	ne
 80007d0:	4240      	negne	r0, r0
 80007d2:	4770      	bx	lr
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	4770      	bx	lr
 80007da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007de:	d105      	bne.n	80007ec <__aeabi_d2iz+0x48>
 80007e0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80007e4:	bf08      	it	eq
 80007e6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80007ea:	4770      	bx	lr
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop

080007f4 <__aeabi_uldivmod>:
 80007f4:	b953      	cbnz	r3, 800080c <__aeabi_uldivmod+0x18>
 80007f6:	b94a      	cbnz	r2, 800080c <__aeabi_uldivmod+0x18>
 80007f8:	2900      	cmp	r1, #0
 80007fa:	bf08      	it	eq
 80007fc:	2800      	cmpeq	r0, #0
 80007fe:	bf1c      	itt	ne
 8000800:	f04f 31ff 	movne.w	r1, #4294967295
 8000804:	f04f 30ff 	movne.w	r0, #4294967295
 8000808:	f000 b974 	b.w	8000af4 <__aeabi_idiv0>
 800080c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000810:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000814:	f000 f806 	bl	8000824 <__udivmoddi4>
 8000818:	f8dd e004 	ldr.w	lr, [sp, #4]
 800081c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000820:	b004      	add	sp, #16
 8000822:	4770      	bx	lr

08000824 <__udivmoddi4>:
 8000824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000828:	9d08      	ldr	r5, [sp, #32]
 800082a:	4604      	mov	r4, r0
 800082c:	468e      	mov	lr, r1
 800082e:	2b00      	cmp	r3, #0
 8000830:	d14d      	bne.n	80008ce <__udivmoddi4+0xaa>
 8000832:	428a      	cmp	r2, r1
 8000834:	4694      	mov	ip, r2
 8000836:	d969      	bls.n	800090c <__udivmoddi4+0xe8>
 8000838:	fab2 f282 	clz	r2, r2
 800083c:	b152      	cbz	r2, 8000854 <__udivmoddi4+0x30>
 800083e:	fa01 f302 	lsl.w	r3, r1, r2
 8000842:	f1c2 0120 	rsb	r1, r2, #32
 8000846:	fa20 f101 	lsr.w	r1, r0, r1
 800084a:	fa0c fc02 	lsl.w	ip, ip, r2
 800084e:	ea41 0e03 	orr.w	lr, r1, r3
 8000852:	4094      	lsls	r4, r2
 8000854:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000858:	0c21      	lsrs	r1, r4, #16
 800085a:	fbbe f6f8 	udiv	r6, lr, r8
 800085e:	fa1f f78c 	uxth.w	r7, ip
 8000862:	fb08 e316 	mls	r3, r8, r6, lr
 8000866:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800086a:	fb06 f107 	mul.w	r1, r6, r7
 800086e:	4299      	cmp	r1, r3
 8000870:	d90a      	bls.n	8000888 <__udivmoddi4+0x64>
 8000872:	eb1c 0303 	adds.w	r3, ip, r3
 8000876:	f106 30ff 	add.w	r0, r6, #4294967295
 800087a:	f080 811f 	bcs.w	8000abc <__udivmoddi4+0x298>
 800087e:	4299      	cmp	r1, r3
 8000880:	f240 811c 	bls.w	8000abc <__udivmoddi4+0x298>
 8000884:	3e02      	subs	r6, #2
 8000886:	4463      	add	r3, ip
 8000888:	1a5b      	subs	r3, r3, r1
 800088a:	b2a4      	uxth	r4, r4
 800088c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000890:	fb08 3310 	mls	r3, r8, r0, r3
 8000894:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000898:	fb00 f707 	mul.w	r7, r0, r7
 800089c:	42a7      	cmp	r7, r4
 800089e:	d90a      	bls.n	80008b6 <__udivmoddi4+0x92>
 80008a0:	eb1c 0404 	adds.w	r4, ip, r4
 80008a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80008a8:	f080 810a 	bcs.w	8000ac0 <__udivmoddi4+0x29c>
 80008ac:	42a7      	cmp	r7, r4
 80008ae:	f240 8107 	bls.w	8000ac0 <__udivmoddi4+0x29c>
 80008b2:	4464      	add	r4, ip
 80008b4:	3802      	subs	r0, #2
 80008b6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008ba:	1be4      	subs	r4, r4, r7
 80008bc:	2600      	movs	r6, #0
 80008be:	b11d      	cbz	r5, 80008c8 <__udivmoddi4+0xa4>
 80008c0:	40d4      	lsrs	r4, r2
 80008c2:	2300      	movs	r3, #0
 80008c4:	e9c5 4300 	strd	r4, r3, [r5]
 80008c8:	4631      	mov	r1, r6
 80008ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ce:	428b      	cmp	r3, r1
 80008d0:	d909      	bls.n	80008e6 <__udivmoddi4+0xc2>
 80008d2:	2d00      	cmp	r5, #0
 80008d4:	f000 80ef 	beq.w	8000ab6 <__udivmoddi4+0x292>
 80008d8:	2600      	movs	r6, #0
 80008da:	e9c5 0100 	strd	r0, r1, [r5]
 80008de:	4630      	mov	r0, r6
 80008e0:	4631      	mov	r1, r6
 80008e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008e6:	fab3 f683 	clz	r6, r3
 80008ea:	2e00      	cmp	r6, #0
 80008ec:	d14a      	bne.n	8000984 <__udivmoddi4+0x160>
 80008ee:	428b      	cmp	r3, r1
 80008f0:	d302      	bcc.n	80008f8 <__udivmoddi4+0xd4>
 80008f2:	4282      	cmp	r2, r0
 80008f4:	f200 80f9 	bhi.w	8000aea <__udivmoddi4+0x2c6>
 80008f8:	1a84      	subs	r4, r0, r2
 80008fa:	eb61 0303 	sbc.w	r3, r1, r3
 80008fe:	2001      	movs	r0, #1
 8000900:	469e      	mov	lr, r3
 8000902:	2d00      	cmp	r5, #0
 8000904:	d0e0      	beq.n	80008c8 <__udivmoddi4+0xa4>
 8000906:	e9c5 4e00 	strd	r4, lr, [r5]
 800090a:	e7dd      	b.n	80008c8 <__udivmoddi4+0xa4>
 800090c:	b902      	cbnz	r2, 8000910 <__udivmoddi4+0xec>
 800090e:	deff      	udf	#255	; 0xff
 8000910:	fab2 f282 	clz	r2, r2
 8000914:	2a00      	cmp	r2, #0
 8000916:	f040 8092 	bne.w	8000a3e <__udivmoddi4+0x21a>
 800091a:	eba1 010c 	sub.w	r1, r1, ip
 800091e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000922:	fa1f fe8c 	uxth.w	lr, ip
 8000926:	2601      	movs	r6, #1
 8000928:	0c20      	lsrs	r0, r4, #16
 800092a:	fbb1 f3f7 	udiv	r3, r1, r7
 800092e:	fb07 1113 	mls	r1, r7, r3, r1
 8000932:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000936:	fb0e f003 	mul.w	r0, lr, r3
 800093a:	4288      	cmp	r0, r1
 800093c:	d908      	bls.n	8000950 <__udivmoddi4+0x12c>
 800093e:	eb1c 0101 	adds.w	r1, ip, r1
 8000942:	f103 38ff 	add.w	r8, r3, #4294967295
 8000946:	d202      	bcs.n	800094e <__udivmoddi4+0x12a>
 8000948:	4288      	cmp	r0, r1
 800094a:	f200 80cb 	bhi.w	8000ae4 <__udivmoddi4+0x2c0>
 800094e:	4643      	mov	r3, r8
 8000950:	1a09      	subs	r1, r1, r0
 8000952:	b2a4      	uxth	r4, r4
 8000954:	fbb1 f0f7 	udiv	r0, r1, r7
 8000958:	fb07 1110 	mls	r1, r7, r0, r1
 800095c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000960:	fb0e fe00 	mul.w	lr, lr, r0
 8000964:	45a6      	cmp	lr, r4
 8000966:	d908      	bls.n	800097a <__udivmoddi4+0x156>
 8000968:	eb1c 0404 	adds.w	r4, ip, r4
 800096c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000970:	d202      	bcs.n	8000978 <__udivmoddi4+0x154>
 8000972:	45a6      	cmp	lr, r4
 8000974:	f200 80bb 	bhi.w	8000aee <__udivmoddi4+0x2ca>
 8000978:	4608      	mov	r0, r1
 800097a:	eba4 040e 	sub.w	r4, r4, lr
 800097e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000982:	e79c      	b.n	80008be <__udivmoddi4+0x9a>
 8000984:	f1c6 0720 	rsb	r7, r6, #32
 8000988:	40b3      	lsls	r3, r6
 800098a:	fa22 fc07 	lsr.w	ip, r2, r7
 800098e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000992:	fa20 f407 	lsr.w	r4, r0, r7
 8000996:	fa01 f306 	lsl.w	r3, r1, r6
 800099a:	431c      	orrs	r4, r3
 800099c:	40f9      	lsrs	r1, r7
 800099e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80009a2:	fa00 f306 	lsl.w	r3, r0, r6
 80009a6:	fbb1 f8f9 	udiv	r8, r1, r9
 80009aa:	0c20      	lsrs	r0, r4, #16
 80009ac:	fa1f fe8c 	uxth.w	lr, ip
 80009b0:	fb09 1118 	mls	r1, r9, r8, r1
 80009b4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009b8:	fb08 f00e 	mul.w	r0, r8, lr
 80009bc:	4288      	cmp	r0, r1
 80009be:	fa02 f206 	lsl.w	r2, r2, r6
 80009c2:	d90b      	bls.n	80009dc <__udivmoddi4+0x1b8>
 80009c4:	eb1c 0101 	adds.w	r1, ip, r1
 80009c8:	f108 3aff 	add.w	sl, r8, #4294967295
 80009cc:	f080 8088 	bcs.w	8000ae0 <__udivmoddi4+0x2bc>
 80009d0:	4288      	cmp	r0, r1
 80009d2:	f240 8085 	bls.w	8000ae0 <__udivmoddi4+0x2bc>
 80009d6:	f1a8 0802 	sub.w	r8, r8, #2
 80009da:	4461      	add	r1, ip
 80009dc:	1a09      	subs	r1, r1, r0
 80009de:	b2a4      	uxth	r4, r4
 80009e0:	fbb1 f0f9 	udiv	r0, r1, r9
 80009e4:	fb09 1110 	mls	r1, r9, r0, r1
 80009e8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80009ec:	fb00 fe0e 	mul.w	lr, r0, lr
 80009f0:	458e      	cmp	lr, r1
 80009f2:	d908      	bls.n	8000a06 <__udivmoddi4+0x1e2>
 80009f4:	eb1c 0101 	adds.w	r1, ip, r1
 80009f8:	f100 34ff 	add.w	r4, r0, #4294967295
 80009fc:	d26c      	bcs.n	8000ad8 <__udivmoddi4+0x2b4>
 80009fe:	458e      	cmp	lr, r1
 8000a00:	d96a      	bls.n	8000ad8 <__udivmoddi4+0x2b4>
 8000a02:	3802      	subs	r0, #2
 8000a04:	4461      	add	r1, ip
 8000a06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000a0e:	eba1 010e 	sub.w	r1, r1, lr
 8000a12:	42a1      	cmp	r1, r4
 8000a14:	46c8      	mov	r8, r9
 8000a16:	46a6      	mov	lr, r4
 8000a18:	d356      	bcc.n	8000ac8 <__udivmoddi4+0x2a4>
 8000a1a:	d053      	beq.n	8000ac4 <__udivmoddi4+0x2a0>
 8000a1c:	b15d      	cbz	r5, 8000a36 <__udivmoddi4+0x212>
 8000a1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000a22:	eb61 010e 	sbc.w	r1, r1, lr
 8000a26:	fa01 f707 	lsl.w	r7, r1, r7
 8000a2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000a2e:	40f1      	lsrs	r1, r6
 8000a30:	431f      	orrs	r7, r3
 8000a32:	e9c5 7100 	strd	r7, r1, [r5]
 8000a36:	2600      	movs	r6, #0
 8000a38:	4631      	mov	r1, r6
 8000a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a3e:	f1c2 0320 	rsb	r3, r2, #32
 8000a42:	40d8      	lsrs	r0, r3
 8000a44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a48:	fa21 f303 	lsr.w	r3, r1, r3
 8000a4c:	4091      	lsls	r1, r2
 8000a4e:	4301      	orrs	r1, r0
 8000a50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a54:	fa1f fe8c 	uxth.w	lr, ip
 8000a58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000a5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000a60:	0c0b      	lsrs	r3, r1, #16
 8000a62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000a66:	fb00 f60e 	mul.w	r6, r0, lr
 8000a6a:	429e      	cmp	r6, r3
 8000a6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000a70:	d908      	bls.n	8000a84 <__udivmoddi4+0x260>
 8000a72:	eb1c 0303 	adds.w	r3, ip, r3
 8000a76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a7a:	d22f      	bcs.n	8000adc <__udivmoddi4+0x2b8>
 8000a7c:	429e      	cmp	r6, r3
 8000a7e:	d92d      	bls.n	8000adc <__udivmoddi4+0x2b8>
 8000a80:	3802      	subs	r0, #2
 8000a82:	4463      	add	r3, ip
 8000a84:	1b9b      	subs	r3, r3, r6
 8000a86:	b289      	uxth	r1, r1
 8000a88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000a90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a94:	fb06 f30e 	mul.w	r3, r6, lr
 8000a98:	428b      	cmp	r3, r1
 8000a9a:	d908      	bls.n	8000aae <__udivmoddi4+0x28a>
 8000a9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000aa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000aa4:	d216      	bcs.n	8000ad4 <__udivmoddi4+0x2b0>
 8000aa6:	428b      	cmp	r3, r1
 8000aa8:	d914      	bls.n	8000ad4 <__udivmoddi4+0x2b0>
 8000aaa:	3e02      	subs	r6, #2
 8000aac:	4461      	add	r1, ip
 8000aae:	1ac9      	subs	r1, r1, r3
 8000ab0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ab4:	e738      	b.n	8000928 <__udivmoddi4+0x104>
 8000ab6:	462e      	mov	r6, r5
 8000ab8:	4628      	mov	r0, r5
 8000aba:	e705      	b.n	80008c8 <__udivmoddi4+0xa4>
 8000abc:	4606      	mov	r6, r0
 8000abe:	e6e3      	b.n	8000888 <__udivmoddi4+0x64>
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	e6f8      	b.n	80008b6 <__udivmoddi4+0x92>
 8000ac4:	454b      	cmp	r3, r9
 8000ac6:	d2a9      	bcs.n	8000a1c <__udivmoddi4+0x1f8>
 8000ac8:	ebb9 0802 	subs.w	r8, r9, r2
 8000acc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ad0:	3801      	subs	r0, #1
 8000ad2:	e7a3      	b.n	8000a1c <__udivmoddi4+0x1f8>
 8000ad4:	4646      	mov	r6, r8
 8000ad6:	e7ea      	b.n	8000aae <__udivmoddi4+0x28a>
 8000ad8:	4620      	mov	r0, r4
 8000ada:	e794      	b.n	8000a06 <__udivmoddi4+0x1e2>
 8000adc:	4640      	mov	r0, r8
 8000ade:	e7d1      	b.n	8000a84 <__udivmoddi4+0x260>
 8000ae0:	46d0      	mov	r8, sl
 8000ae2:	e77b      	b.n	80009dc <__udivmoddi4+0x1b8>
 8000ae4:	3b02      	subs	r3, #2
 8000ae6:	4461      	add	r1, ip
 8000ae8:	e732      	b.n	8000950 <__udivmoddi4+0x12c>
 8000aea:	4630      	mov	r0, r6
 8000aec:	e709      	b.n	8000902 <__udivmoddi4+0xde>
 8000aee:	4464      	add	r4, ip
 8000af0:	3802      	subs	r0, #2
 8000af2:	e742      	b.n	800097a <__udivmoddi4+0x156>

08000af4 <__aeabi_idiv0>:
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <I2CStartRestart>:

#define ACCELEROMETER_READ  0x33
#define ACCELEROMETER_WRITE 0x32

void I2CStartRestart()
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
	ACCESS(I2C1_CR1) |= (1 << 8);
 8000afc:	4b05      	ldr	r3, [pc, #20]	; (8000b14 <I2CStartRestart+0x1c>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a04      	ldr	r2, [pc, #16]	; (8000b14 <I2CStartRestart+0x1c>)
 8000b02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b06:	6013      	str	r3, [r2, #0]
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	40005400 	.word	0x40005400

08000b18 <I2CStop>:

void I2CStop()
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0

	ACCESS(I2C1_CR1) |= (1 << 9);
 8000b1c:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <I2CStop+0x1c>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a04      	ldr	r2, [pc, #16]	; (8000b34 <I2CStop+0x1c>)
 8000b22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b26:	6013      	str	r3, [r2, #0]
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	40005400 	.word	0x40005400

08000b38 <I2CEnableAcknowledge>:

void I2CEnableAcknowledge()
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0

	ACCESS(I2C1_CR1) |= (1 << 10);
 8000b3c:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <I2CEnableAcknowledge+0x1c>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a04      	ldr	r2, [pc, #16]	; (8000b54 <I2CEnableAcknowledge+0x1c>)
 8000b42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b46:	6013      	str	r3, [r2, #0]
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	40005400 	.word	0x40005400

08000b58 <I2CDisableAcknowledge>:

void I2CDisableAcknowledge()
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
	ACCESS(I2C1_CR1) &= ~(1 << 10);
 8000b5c:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <I2CDisableAcknowledge+0x1c>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a04      	ldr	r2, [pc, #16]	; (8000b74 <I2CDisableAcknowledge+0x1c>)
 8000b62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000b66:	6013      	str	r3, [r2, #0]
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	40005400 	.word	0x40005400

08000b78 <I2CSendSlaveAddress>:

void I2CSendSlaveAddress(unsigned short address)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	80fb      	strh	r3, [r7, #6]
	while((ACCESS(I2C1_SR1) & 1) == 0);
 8000b82:	bf00      	nop
 8000b84:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <I2CSendSlaveAddress+0x40>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f003 0301 	and.w	r3, r3, #1
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d0f9      	beq.n	8000b84 <I2CSendSlaveAddress+0xc>

	ACCESS(I2C1_DR) = address;
 8000b90:	4a0a      	ldr	r2, [pc, #40]	; (8000bbc <I2CSendSlaveAddress+0x44>)
 8000b92:	88fb      	ldrh	r3, [r7, #6]
 8000b94:	6013      	str	r3, [r2, #0]

	while((ACCESS(I2C1_SR1) & (1 << 1)) == 0);
 8000b96:	bf00      	nop
 8000b98:	4b07      	ldr	r3, [pc, #28]	; (8000bb8 <I2CSendSlaveAddress+0x40>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f003 0302 	and.w	r3, r3, #2
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d0f9      	beq.n	8000b98 <I2CSendSlaveAddress+0x20>

	ACCESS(I2C1_SR1);
 8000ba4:	4b04      	ldr	r3, [pc, #16]	; (8000bb8 <I2CSendSlaveAddress+0x40>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
	ACCESS(I2C1_SR2);
 8000ba8:	4b05      	ldr	r3, [pc, #20]	; (8000bc0 <I2CSendSlaveAddress+0x48>)
 8000baa:	681b      	ldr	r3, [r3, #0]
}
 8000bac:	bf00      	nop
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	40005414 	.word	0x40005414
 8000bbc:	40005410 	.word	0x40005410
 8000bc0:	40005418 	.word	0x40005418

08000bc4 <I2CSendRegister>:

void I2CSendRegister(unsigned short registerAddress)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	80fb      	strh	r3, [r7, #6]
	while((ACCESS(I2C1_SR1) & (1 << 7)) == 0);
 8000bce:	bf00      	nop
 8000bd0:	4b0b      	ldr	r3, [pc, #44]	; (8000c00 <I2CSendRegister+0x3c>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d0f9      	beq.n	8000bd0 <I2CSendRegister+0xc>

	ACCESS(I2C1_DR) = registerAddress;
 8000bdc:	4a09      	ldr	r2, [pc, #36]	; (8000c04 <I2CSendRegister+0x40>)
 8000bde:	88fb      	ldrh	r3, [r7, #6]
 8000be0:	6013      	str	r3, [r2, #0]

	while((ACCESS(I2C1_SR1) & (1 << 7)) == 0);
 8000be2:	bf00      	nop
 8000be4:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <I2CSendRegister+0x3c>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d0f9      	beq.n	8000be4 <I2CSendRegister+0x20>
}
 8000bf0:	bf00      	nop
 8000bf2:	bf00      	nop
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	40005414 	.word	0x40005414
 8000c04:	40005410 	.word	0x40005410

08000c08 <I2CWaitIfBusy>:

void I2CWaitIfBusy()
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
	while((ACCESS(I2C1_SR2) & (1 << 1)) == (1 << 1));
 8000c0c:	bf00      	nop
 8000c0e:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <I2CWaitIfBusy+0x20>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f003 0302 	and.w	r3, r3, #2
 8000c16:	2b02      	cmp	r3, #2
 8000c18:	d0f9      	beq.n	8000c0e <I2CWaitIfBusy+0x6>
}
 8000c1a:	bf00      	nop
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	40005418 	.word	0x40005418

08000c2c <I2CWriteByte>:

void I2CWriteByte(unsigned char data)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	71fb      	strb	r3, [r7, #7]
	ACCESS(I2C1_DR) = data;
 8000c36:	4a08      	ldr	r2, [pc, #32]	; (8000c58 <I2CWriteByte+0x2c>)
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	6013      	str	r3, [r2, #0]

	while((ACCESS(I2C1_SR1) & (1 << 2)) == 0);
 8000c3c:	bf00      	nop
 8000c3e:	4b07      	ldr	r3, [pc, #28]	; (8000c5c <I2CWriteByte+0x30>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f003 0304 	and.w	r3, r3, #4
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d0f9      	beq.n	8000c3e <I2CWriteByte+0x12>
}
 8000c4a:	bf00      	nop
 8000c4c:	bf00      	nop
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	40005410 	.word	0x40005410
 8000c5c:	40005414 	.word	0x40005414

08000c60 <I2CGetData>:

unsigned char I2CGetData()
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
	while((ACCESS(I2C1_SR1) & (1 << 6)) == 0) { }
 8000c64:	bf00      	nop
 8000c66:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <I2CGetData+0x24>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d0f9      	beq.n	8000c66 <I2CGetData+0x6>

	return ACCESS(I2C1_DR);
 8000c72:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <I2CGetData+0x28>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	b2db      	uxtb	r3, r3
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	40005414 	.word	0x40005414
 8000c88:	40005410 	.word	0x40005410

08000c8c <ReadFromAccelerometer>:

unsigned char ReadFromAccelerometer(unsigned short registerAddress)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	80fb      	strh	r3, [r7, #6]
	I2CWaitIfBusy();
 8000c96:	f7ff ffb7 	bl	8000c08 <I2CWaitIfBusy>

	I2CEnableAcknowledge();
 8000c9a:	f7ff ff4d 	bl	8000b38 <I2CEnableAcknowledge>

	I2CStartRestart();
 8000c9e:	f7ff ff2b 	bl	8000af8 <I2CStartRestart>

	I2CSendSlaveAddress(ACCELEROMETER_WRITE);
 8000ca2:	2032      	movs	r0, #50	; 0x32
 8000ca4:	f7ff ff68 	bl	8000b78 <I2CSendSlaveAddress>

	I2CSendRegister(registerAddress);
 8000ca8:	88fb      	ldrh	r3, [r7, #6]
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff ff8a 	bl	8000bc4 <I2CSendRegister>

	I2CStartRestart();
 8000cb0:	f7ff ff22 	bl	8000af8 <I2CStartRestart>

	I2CSendSlaveAddress(ACCELEROMETER_READ);
 8000cb4:	2033      	movs	r0, #51	; 0x33
 8000cb6:	f7ff ff5f 	bl	8000b78 <I2CSendSlaveAddress>

	I2CDisableAcknowledge();
 8000cba:	f7ff ff4d 	bl	8000b58 <I2CDisableAcknowledge>

	I2CStop();
 8000cbe:	f7ff ff2b 	bl	8000b18 <I2CStop>

	return I2CGetData();
 8000cc2:	f7ff ffcd 	bl	8000c60 <I2CGetData>
 8000cc6:	4603      	mov	r3, r0
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <WriteToAccelerometer>:

void WriteToAccelerometer(unsigned short registerAddress, unsigned char data)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	460a      	mov	r2, r1
 8000cda:	80fb      	strh	r3, [r7, #6]
 8000cdc:	4613      	mov	r3, r2
 8000cde:	717b      	strb	r3, [r7, #5]
	I2CWaitIfBusy();
 8000ce0:	f7ff ff92 	bl	8000c08 <I2CWaitIfBusy>

	I2CStartRestart();
 8000ce4:	f7ff ff08 	bl	8000af8 <I2CStartRestart>

	I2CSendSlaveAddress(ACCELEROMETER_WRITE);
 8000ce8:	2032      	movs	r0, #50	; 0x32
 8000cea:	f7ff ff45 	bl	8000b78 <I2CSendSlaveAddress>

	I2CSendRegister(registerAddress);
 8000cee:	88fb      	ldrh	r3, [r7, #6]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff ff67 	bl	8000bc4 <I2CSendRegister>

	I2CWriteByte(data);
 8000cf6:	797b      	ldrb	r3, [r7, #5]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff ff97 	bl	8000c2c <I2CWriteByte>

	I2CStop();
 8000cfe:	f7ff ff0b 	bl	8000b18 <I2CStop>
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
	...

08000d0c <AccelerometerInit>:


void AccelerometerInit()
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0

	ACCESS(RCC_AHB1ENR) |= (1 << 1);
 8000d12:	4b32      	ldr	r3, [pc, #200]	; (8000ddc <AccelerometerInit+0xd0>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a31      	ldr	r2, [pc, #196]	; (8000ddc <AccelerometerInit+0xd0>)
 8000d18:	f043 0302 	orr.w	r3, r3, #2
 8000d1c:	6013      	str	r3, [r2, #0]

	ACCESS(GPIOB_MODER) |= ((1 << 13) | (1 << 19));
 8000d1e:	4b30      	ldr	r3, [pc, #192]	; (8000de0 <AccelerometerInit+0xd4>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a2f      	ldr	r2, [pc, #188]	; (8000de0 <AccelerometerInit+0xd4>)
 8000d24:	f443 2302 	orr.w	r3, r3, #532480	; 0x82000
 8000d28:	6013      	str	r3, [r2, #0]


	ACCESS(GPIOB_AFRL) |= (4 << 24);
 8000d2a:	4b2e      	ldr	r3, [pc, #184]	; (8000de4 <AccelerometerInit+0xd8>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a2d      	ldr	r2, [pc, #180]	; (8000de4 <AccelerometerInit+0xd8>)
 8000d30:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000d34:	6013      	str	r3, [r2, #0]
	ACCESS(GPIOB_AFRH) |= (4 << 4);
 8000d36:	4b2c      	ldr	r3, [pc, #176]	; (8000de8 <AccelerometerInit+0xdc>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a2b      	ldr	r2, [pc, #172]	; (8000de8 <AccelerometerInit+0xdc>)
 8000d3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d40:	6013      	str	r3, [r2, #0]

	ACCESS(GPIOB_OSPEEDR) |= ((2 << 12) | (2 << 18));
 8000d42:	4b2a      	ldr	r3, [pc, #168]	; (8000dec <AccelerometerInit+0xe0>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a29      	ldr	r2, [pc, #164]	; (8000dec <AccelerometerInit+0xe0>)
 8000d48:	f443 2302 	orr.w	r3, r3, #532480	; 0x82000
 8000d4c:	6013      	str	r3, [r2, #0]

	ACCESS(RCC_APB1ENR) |= (1 << 21);
 8000d4e:	4b28      	ldr	r3, [pc, #160]	; (8000df0 <AccelerometerInit+0xe4>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a27      	ldr	r2, [pc, #156]	; (8000df0 <AccelerometerInit+0xe4>)
 8000d54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d58:	6013      	str	r3, [r2, #0]

	ACCESS(I2C1_CR2) &= ~(0x3F);
 8000d5a:	4b26      	ldr	r3, [pc, #152]	; (8000df4 <AccelerometerInit+0xe8>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a25      	ldr	r2, [pc, #148]	; (8000df4 <AccelerometerInit+0xe8>)
 8000d60:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000d64:	6013      	str	r3, [r2, #0]
	ACCESS(I2C1_CR2) |= (0x02);
 8000d66:	4b23      	ldr	r3, [pc, #140]	; (8000df4 <AccelerometerInit+0xe8>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a22      	ldr	r2, [pc, #136]	; (8000df4 <AccelerometerInit+0xe8>)
 8000d6c:	f043 0302 	orr.w	r3, r3, #2
 8000d70:	6013      	str	r3, [r2, #0]


	ACCESS(I2C1_CCR) &= ~(0xFFF);
 8000d72:	4b21      	ldr	r3, [pc, #132]	; (8000df8 <AccelerometerInit+0xec>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a20      	ldr	r2, [pc, #128]	; (8000df8 <AccelerometerInit+0xec>)
 8000d78:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000d7c:	f023 030f 	bic.w	r3, r3, #15
 8000d80:	6013      	str	r3, [r2, #0]
	ACCESS(I2C1_CCR) |= 0x50;
 8000d82:	4b1d      	ldr	r3, [pc, #116]	; (8000df8 <AccelerometerInit+0xec>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a1c      	ldr	r2, [pc, #112]	; (8000df8 <AccelerometerInit+0xec>)
 8000d88:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000d8c:	6013      	str	r3, [r2, #0]


	ACCESS(I2C1_TRISE) &= ~(0x3F);
 8000d8e:	4b1b      	ldr	r3, [pc, #108]	; (8000dfc <AccelerometerInit+0xf0>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a1a      	ldr	r2, [pc, #104]	; (8000dfc <AccelerometerInit+0xf0>)
 8000d94:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000d98:	6013      	str	r3, [r2, #0]
	ACCESS(I2C1_TRISE) |= 0x03;
 8000d9a:	4b18      	ldr	r3, [pc, #96]	; (8000dfc <AccelerometerInit+0xf0>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a17      	ldr	r2, [pc, #92]	; (8000dfc <AccelerometerInit+0xf0>)
 8000da0:	f043 0303 	orr.w	r3, r3, #3
 8000da4:	6013      	str	r3, [r2, #0]


	ACCESS(I2C1_OAR1) |= ((0x21 << 1) | (1 << 14));
 8000da6:	4b16      	ldr	r3, [pc, #88]	; (8000e00 <AccelerometerInit+0xf4>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a15      	ldr	r2, [pc, #84]	; (8000e00 <AccelerometerInit+0xf4>)
 8000dac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000db0:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8000db4:	6013      	str	r3, [r2, #0]

	ACCESS(I2C1_CR1) |= 1;
 8000db6:	4b13      	ldr	r3, [pc, #76]	; (8000e04 <AccelerometerInit+0xf8>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a12      	ldr	r2, [pc, #72]	; (8000e04 <AccelerometerInit+0xf8>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	6013      	str	r3, [r2, #0]


	unsigned char accelerometerID = ReadFromAccelerometer(0xF);
 8000dc2:	200f      	movs	r0, #15
 8000dc4:	f7ff ff62 	bl	8000c8c <ReadFromAccelerometer>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	71fb      	strb	r3, [r7, #7]
	if(accelerometerID != 0x33)
	{
	}


	WriteToAccelerometer(0x20, 0x47);
 8000dcc:	2147      	movs	r1, #71	; 0x47
 8000dce:	2020      	movs	r0, #32
 8000dd0:	f7ff ff7e 	bl	8000cd0 <WriteToAccelerometer>
}
 8000dd4:	bf00      	nop
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40023830 	.word	0x40023830
 8000de0:	40020400 	.word	0x40020400
 8000de4:	40020420 	.word	0x40020420
 8000de8:	40020424 	.word	0x40020424
 8000dec:	40020408 	.word	0x40020408
 8000df0:	40023840 	.word	0x40023840
 8000df4:	40005404 	.word	0x40005404
 8000df8:	4000541c 	.word	0x4000541c
 8000dfc:	40005420 	.word	0x40005420
 8000e00:	40005408 	.word	0x40005408
 8000e04:	40005400 	.word	0x40005400

08000e08 <GetAccelerometerValues>:

void GetAccelerometerValues(short* x, short* y, short* z)
{
 8000e08:	b590      	push	{r4, r7, lr}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	607a      	str	r2, [r7, #4]
	*x = ((ReadFromAccelerometer(0x29) << 8) | ReadFromAccelerometer(0x28));
 8000e14:	2029      	movs	r0, #41	; 0x29
 8000e16:	f7ff ff39 	bl	8000c8c <ReadFromAccelerometer>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	021b      	lsls	r3, r3, #8
 8000e1e:	b21c      	sxth	r4, r3
 8000e20:	2028      	movs	r0, #40	; 0x28
 8000e22:	f7ff ff33 	bl	8000c8c <ReadFromAccelerometer>
 8000e26:	4603      	mov	r3, r0
 8000e28:	b21b      	sxth	r3, r3
 8000e2a:	4323      	orrs	r3, r4
 8000e2c:	b21a      	sxth	r2, r3
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	801a      	strh	r2, [r3, #0]
	*y = ((ReadFromAccelerometer(0x2B) << 8) | ReadFromAccelerometer(0x2A));
 8000e32:	202b      	movs	r0, #43	; 0x2b
 8000e34:	f7ff ff2a 	bl	8000c8c <ReadFromAccelerometer>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	021b      	lsls	r3, r3, #8
 8000e3c:	b21c      	sxth	r4, r3
 8000e3e:	202a      	movs	r0, #42	; 0x2a
 8000e40:	f7ff ff24 	bl	8000c8c <ReadFromAccelerometer>
 8000e44:	4603      	mov	r3, r0
 8000e46:	b21b      	sxth	r3, r3
 8000e48:	4323      	orrs	r3, r4
 8000e4a:	b21a      	sxth	r2, r3
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	801a      	strh	r2, [r3, #0]
	*z = ((ReadFromAccelerometer(0x2D) << 8) | ReadFromAccelerometer(0x2C));
 8000e50:	202d      	movs	r0, #45	; 0x2d
 8000e52:	f7ff ff1b 	bl	8000c8c <ReadFromAccelerometer>
 8000e56:	4603      	mov	r3, r0
 8000e58:	021b      	lsls	r3, r3, #8
 8000e5a:	b21c      	sxth	r4, r3
 8000e5c:	202c      	movs	r0, #44	; 0x2c
 8000e5e:	f7ff ff15 	bl	8000c8c <ReadFromAccelerometer>
 8000e62:	4603      	mov	r3, r0
 8000e64:	b21b      	sxth	r3, r3
 8000e66:	4323      	orrs	r3, r4
 8000e68:	b21a      	sxth	r2, r3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	801a      	strh	r2, [r3, #0]
}
 8000e6e:	bf00      	nop
 8000e70:	3714      	adds	r7, #20
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd90      	pop	{r4, r7, pc}
	...

08000e78 <DisplayAxisValues>:
	DisplayIntegerValue(accel); 
	DisplayIntegerValue(gyro); 
}

void DisplayAxisValues()
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
	GetAccelerometerValues(&accelX, &accelY, &accelZ);
 8000e7c:	4a05      	ldr	r2, [pc, #20]	; (8000e94 <DisplayAxisValues+0x1c>)
 8000e7e:	4906      	ldr	r1, [pc, #24]	; (8000e98 <DisplayAxisValues+0x20>)
 8000e80:	4806      	ldr	r0, [pc, #24]	; (8000e9c <DisplayAxisValues+0x24>)
 8000e82:	f7ff ffc1 	bl	8000e08 <GetAccelerometerValues>

	GetGyroValues(&gyroX, &gyroY, &gyroZ);
 8000e86:	4a06      	ldr	r2, [pc, #24]	; (8000ea0 <DisplayAxisValues+0x28>)
 8000e88:	4906      	ldr	r1, [pc, #24]	; (8000ea4 <DisplayAxisValues+0x2c>)
 8000e8a:	4807      	ldr	r0, [pc, #28]	; (8000ea8 <DisplayAxisValues+0x30>)
 8000e8c:	f000 f93c 	bl	8001108 <GetGyroValues>



}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	2000009e 	.word	0x2000009e
 8000e98:	2000009c 	.word	0x2000009c
 8000e9c:	2000009a 	.word	0x2000009a
 8000ea0:	20000098 	.word	0x20000098
 8000ea4:	20000096 	.word	0x20000096
 8000ea8:	20000094 	.word	0x20000094

08000eac <WaitForSPI1RXReady>:

#include "RegisterAddresses.h"
#include <stdint.h>

void WaitForSPI1RXReady()
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0

	while((ACCESS(SPI1_SR) & 1) == 0 || (ACCESS(SPI1_SR) & (1 << 7)) == 1) { }
 8000eb0:	bf00      	nop
 8000eb2:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <WaitForSPI1RXReady+0x2c>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d0f9      	beq.n	8000eb2 <WaitForSPI1RXReady+0x6>
 8000ebe:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <WaitForSPI1RXReady+0x2c>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d0f3      	beq.n	8000eb2 <WaitForSPI1RXReady+0x6>
}
 8000eca:	bf00      	nop
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	40013008 	.word	0x40013008

08000edc <WaitForSPI1TXReady>:

void WaitForSPI1TXReady()
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
	while((ACCESS(SPI1_SR) & (1 << 1)) == 0 || (ACCESS(SPI1_SR) & (1 << 7)) == 1) { }
 8000ee0:	bf00      	nop
 8000ee2:	4b09      	ldr	r3, [pc, #36]	; (8000f08 <WaitForSPI1TXReady+0x2c>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f003 0302 	and.w	r3, r3, #2
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d0f9      	beq.n	8000ee2 <WaitForSPI1TXReady+0x6>
 8000eee:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <WaitForSPI1TXReady+0x2c>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d0f3      	beq.n	8000ee2 <WaitForSPI1TXReady+0x6>
}
 8000efa:	bf00      	nop
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	40013008 	.word	0x40013008

08000f0c <ReadFromGyro>:



unsigned char ReadFromGyro(unsigned char gyroRegister)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	71fb      	strb	r3, [r7, #7]
	ACCESS(GPIOE_BSRR) |= (1 << 19);
 8000f16:	4b14      	ldr	r3, [pc, #80]	; (8000f68 <ReadFromGyro+0x5c>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a13      	ldr	r2, [pc, #76]	; (8000f68 <ReadFromGyro+0x5c>)
 8000f1c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f20:	6013      	str	r3, [r2, #0]
	WaitForSPI1TXReady();
 8000f22:	f7ff ffdb 	bl	8000edc <WaitForSPI1TXReady>
	ACCESS(SPI1_DR) = (gyroRegister | 0x80);
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <ReadFromGyro+0x60>)
 8000f30:	601a      	str	r2, [r3, #0]
	WaitForSPI1RXReady();
 8000f32:	f7ff ffbb 	bl	8000eac <WaitForSPI1RXReady>
	ACCESS(SPI1_DR);
 8000f36:	4b0d      	ldr	r3, [pc, #52]	; (8000f6c <ReadFromGyro+0x60>)
 8000f38:	681b      	ldr	r3, [r3, #0]
	WaitForSPI1TXReady();
 8000f3a:	f7ff ffcf 	bl	8000edc <WaitForSPI1TXReady>
	ACCESS(SPI1_DR) = 0xFF;
 8000f3e:	4b0b      	ldr	r3, [pc, #44]	; (8000f6c <ReadFromGyro+0x60>)
 8000f40:	22ff      	movs	r2, #255	; 0xff
 8000f42:	601a      	str	r2, [r3, #0]
	WaitForSPI1RXReady();
 8000f44:	f7ff ffb2 	bl	8000eac <WaitForSPI1RXReady>
	volatile unsigned char readValue = (unsigned char)ACCESS(SPI1_DR);
 8000f48:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <ReadFromGyro+0x60>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	73fb      	strb	r3, [r7, #15]
	ACCESS(GPIOE_BSRR) |= (1 << 3);
 8000f50:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <ReadFromGyro+0x5c>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a04      	ldr	r2, [pc, #16]	; (8000f68 <ReadFromGyro+0x5c>)
 8000f56:	f043 0308 	orr.w	r3, r3, #8
 8000f5a:	6013      	str	r3, [r2, #0]

	return readValue;
 8000f5c:	7bfb      	ldrb	r3, [r7, #15]
 8000f5e:	b2db      	uxtb	r3, r3
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3710      	adds	r7, #16
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40021018 	.word	0x40021018
 8000f6c:	4001300c 	.word	0x4001300c

08000f70 <WriteToGyro>:

void WriteToGyro(unsigned char gyroRegister, unsigned char value)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	460a      	mov	r2, r1
 8000f7a:	71fb      	strb	r3, [r7, #7]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	71bb      	strb	r3, [r7, #6]
	ACCESS(GPIOE_BSRR) |= (1 << 19);
 8000f80:	4b10      	ldr	r3, [pc, #64]	; (8000fc4 <WriteToGyro+0x54>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a0f      	ldr	r2, [pc, #60]	; (8000fc4 <WriteToGyro+0x54>)
 8000f86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f8a:	6013      	str	r3, [r2, #0]
	WaitForSPI1TXReady();
 8000f8c:	f7ff ffa6 	bl	8000edc <WaitForSPI1TXReady>
	ACCESS(SPI1_DR) = gyroRegister;
 8000f90:	4a0d      	ldr	r2, [pc, #52]	; (8000fc8 <WriteToGyro+0x58>)
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	6013      	str	r3, [r2, #0]
	WaitForSPI1RXReady();
 8000f96:	f7ff ff89 	bl	8000eac <WaitForSPI1RXReady>
	ACCESS(SPI1_DR);
 8000f9a:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <WriteToGyro+0x58>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
	WaitForSPI1TXReady();
 8000f9e:	f7ff ff9d 	bl	8000edc <WaitForSPI1TXReady>
	ACCESS(SPI1_DR) = value;
 8000fa2:	4a09      	ldr	r2, [pc, #36]	; (8000fc8 <WriteToGyro+0x58>)
 8000fa4:	79bb      	ldrb	r3, [r7, #6]
 8000fa6:	6013      	str	r3, [r2, #0]
	WaitForSPI1RXReady();
 8000fa8:	f7ff ff80 	bl	8000eac <WaitForSPI1RXReady>
	ACCESS(SPI1_DR);
 8000fac:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <WriteToGyro+0x58>)
 8000fae:	681b      	ldr	r3, [r3, #0]
	ACCESS(GPIOE_BSRR) |= (1 << 3);
 8000fb0:	4b04      	ldr	r3, [pc, #16]	; (8000fc4 <WriteToGyro+0x54>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a03      	ldr	r2, [pc, #12]	; (8000fc4 <WriteToGyro+0x54>)
 8000fb6:	f043 0308 	orr.w	r3, r3, #8
 8000fba:	6013      	str	r3, [r2, #0]
}
 8000fbc:	bf00      	nop
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40021018 	.word	0x40021018
 8000fc8:	4001300c 	.word	0x4001300c

08000fcc <GyroInit>:

void GyroInit()
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0

	ACCESS(RCC_AHB1ENR) |= 1;
 8000fd0:	4b27      	ldr	r3, [pc, #156]	; (8001070 <GyroInit+0xa4>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a26      	ldr	r2, [pc, #152]	; (8001070 <GyroInit+0xa4>)
 8000fd6:	f043 0301 	orr.w	r3, r3, #1
 8000fda:	6013      	str	r3, [r2, #0]


	ACCESS(RCC_AHB1ENR) |= (1 << 4);
 8000fdc:	4b24      	ldr	r3, [pc, #144]	; (8001070 <GyroInit+0xa4>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a23      	ldr	r2, [pc, #140]	; (8001070 <GyroInit+0xa4>)
 8000fe2:	f043 0310 	orr.w	r3, r3, #16
 8000fe6:	6013      	str	r3, [r2, #0]


	ACCESS(GPIOA_MODER) |= ((1 << 11) | (1 << 13) | (1 << 15));
 8000fe8:	4b22      	ldr	r3, [pc, #136]	; (8001074 <GyroInit+0xa8>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a21      	ldr	r2, [pc, #132]	; (8001074 <GyroInit+0xa8>)
 8000fee:	f443 4328 	orr.w	r3, r3, #43008	; 0xa800
 8000ff2:	6013      	str	r3, [r2, #0]
	ACCESS(GPIOE_MODER) |= (1 << 6);
 8000ff4:	4b20      	ldr	r3, [pc, #128]	; (8001078 <GyroInit+0xac>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a1f      	ldr	r2, [pc, #124]	; (8001078 <GyroInit+0xac>)
 8000ffa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ffe:	6013      	str	r3, [r2, #0]

	ACCESS(GPIOA_AFRL) |= ((5 << 20) | (5 << 24) | (5 << 28));
 8001000:	4b1e      	ldr	r3, [pc, #120]	; (800107c <GyroInit+0xb0>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a1d      	ldr	r2, [pc, #116]	; (800107c <GyroInit+0xb0>)
 8001006:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 800100a:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 800100e:	6013      	str	r3, [r2, #0]

	ACCESS(GPIOA_OSPEEDR) |= ((2 << 10) | (2 << 12) | (2 << 14));
 8001010:	4b1b      	ldr	r3, [pc, #108]	; (8001080 <GyroInit+0xb4>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a1a      	ldr	r2, [pc, #104]	; (8001080 <GyroInit+0xb4>)
 8001016:	f443 4328 	orr.w	r3, r3, #43008	; 0xa800
 800101a:	6013      	str	r3, [r2, #0]
	ACCESS(GPIOE_OSPEEDR) |= (2 << 6);
 800101c:	4b19      	ldr	r3, [pc, #100]	; (8001084 <GyroInit+0xb8>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a18      	ldr	r2, [pc, #96]	; (8001084 <GyroInit+0xb8>)
 8001022:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001026:	6013      	str	r3, [r2, #0]

	ACCESS(RCC_APB2ENR) |= (1 << 12);
 8001028:	4b17      	ldr	r3, [pc, #92]	; (8001088 <GyroInit+0xbc>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a16      	ldr	r2, [pc, #88]	; (8001088 <GyroInit+0xbc>)
 800102e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001032:	6013      	str	r3, [r2, #0]


	ACCESS(SPI1_CR1) |= (1 | (1 << 1) | (1 << 2) | (2 << 3) | (1 << 8) | (1 << 9));
 8001034:	4b15      	ldr	r3, [pc, #84]	; (800108c <GyroInit+0xc0>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a14      	ldr	r2, [pc, #80]	; (800108c <GyroInit+0xc0>)
 800103a:	f443 7345 	orr.w	r3, r3, #788	; 0x314
 800103e:	f043 0303 	orr.w	r3, r3, #3
 8001042:	6013      	str	r3, [r2, #0]

	ACCESS(SPI1_CR1) |= (1 << 6);
 8001044:	4b11      	ldr	r3, [pc, #68]	; (800108c <GyroInit+0xc0>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a10      	ldr	r2, [pc, #64]	; (800108c <GyroInit+0xc0>)
 800104a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800104e:	6013      	str	r3, [r2, #0]

	ACCESS(GPIOE_BSRR) |= (1 << 3);
 8001050:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <GyroInit+0xc4>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a0e      	ldr	r2, [pc, #56]	; (8001090 <GyroInit+0xc4>)
 8001056:	f043 0308 	orr.w	r3, r3, #8
 800105a:	6013      	str	r3, [r2, #0]

	if(ReadFromGyro(0x0F) != 0xD4)
 800105c:	200f      	movs	r0, #15
 800105e:	f7ff ff55 	bl	8000f0c <ReadFromGyro>
	{
	}

	WriteToGyro(0x20, 0x0F);
 8001062:	210f      	movs	r1, #15
 8001064:	2020      	movs	r0, #32
 8001066:	f7ff ff83 	bl	8000f70 <WriteToGyro>
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40023830 	.word	0x40023830
 8001074:	40020000 	.word	0x40020000
 8001078:	40021000 	.word	0x40021000
 800107c:	40020020 	.word	0x40020020
 8001080:	40020008 	.word	0x40020008
 8001084:	40021008 	.word	0x40021008
 8001088:	40023844 	.word	0x40023844
 800108c:	40013000 	.word	0x40013000
 8001090:	40021018 	.word	0x40021018
 8001094:	00000000 	.word	0x00000000

08001098 <GetAxisValue>:

short GetAxisValue(unsigned char lowRegister, unsigned char highRegister)
{
 8001098:	b590      	push	{r4, r7, lr}
 800109a:	b087      	sub	sp, #28
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	460a      	mov	r2, r1
 80010a2:	71fb      	strb	r3, [r7, #7]
 80010a4:	4613      	mov	r3, r2
 80010a6:	71bb      	strb	r3, [r7, #6]

	double scaler = 8.75 * 0.001;
 80010a8:	a315      	add	r3, pc, #84	; (adr r3, 8001100 <GetAxisValue+0x68>)
 80010aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ae:	e9c7 2304 	strd	r2, r3, [r7, #16]
	short temp = (ReadFromGyro(lowRegister) | (ReadFromGyro(highRegister) << 8));
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff29 	bl	8000f0c <ReadFromGyro>
 80010ba:	4603      	mov	r3, r0
 80010bc:	b21c      	sxth	r4, r3
 80010be:	79bb      	ldrb	r3, [r7, #6]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff ff23 	bl	8000f0c <ReadFromGyro>
 80010c6:	4603      	mov	r3, r0
 80010c8:	021b      	lsls	r3, r3, #8
 80010ca:	b21b      	sxth	r3, r3
 80010cc:	4323      	orrs	r3, r4
 80010ce:	81fb      	strh	r3, [r7, #14]
	return (short)((double)temp * scaler);
 80010d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff fafb 	bl	80006d0 <__aeabi_i2d>
 80010da:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80010de:	f7ff f87b 	bl	80001d8 <__aeabi_dmul>
 80010e2:	4602      	mov	r2, r0
 80010e4:	460b      	mov	r3, r1
 80010e6:	4610      	mov	r0, r2
 80010e8:	4619      	mov	r1, r3
 80010ea:	f7ff fb5b 	bl	80007a4 <__aeabi_d2iz>
 80010ee:	4603      	mov	r3, r0
 80010f0:	b21b      	sxth	r3, r3
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	371c      	adds	r7, #28
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd90      	pop	{r4, r7, pc}
 80010fa:	bf00      	nop
 80010fc:	f3af 8000 	nop.w
 8001100:	1eb851ec 	.word	0x1eb851ec
 8001104:	3f81eb85 	.word	0x3f81eb85

08001108 <GetGyroValues>:

void GetGyroValues(short* x, short* y, short* z)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
	*x = GetAxisValue(0x28, 0x29);
 8001114:	2129      	movs	r1, #41	; 0x29
 8001116:	2028      	movs	r0, #40	; 0x28
 8001118:	f7ff ffbe 	bl	8001098 <GetAxisValue>
 800111c:	4603      	mov	r3, r0
 800111e:	461a      	mov	r2, r3
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	801a      	strh	r2, [r3, #0]
	*y = GetAxisValue(0x2A, 0x2B);
 8001124:	212b      	movs	r1, #43	; 0x2b
 8001126:	202a      	movs	r0, #42	; 0x2a
 8001128:	f7ff ffb6 	bl	8001098 <GetAxisValue>
 800112c:	4603      	mov	r3, r0
 800112e:	461a      	mov	r2, r3
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	801a      	strh	r2, [r3, #0]
	*z = GetAxisValue(0x2C, 0x2D);
 8001134:	212d      	movs	r1, #45	; 0x2d
 8001136:	202c      	movs	r0, #44	; 0x2c
 8001138:	f7ff ffae 	bl	8001098 <GetAxisValue>
 800113c:	4603      	mov	r3, r0
 800113e:	461a      	mov	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	801a      	strh	r2, [r3, #0]
}
 8001144:	bf00      	nop
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <kademeliArttir>:
						   {90,90,90,90,90}};




void kademeliArttir(TIM_HandleTypeDef timer,unsigned int chanel, int bacak, int eklem, int angle, int fark){
 800114c:	b084      	sub	sp, #16
 800114e:	b580      	push	{r7, lr}
 8001150:	b082      	sub	sp, #8
 8001152:	af00      	add	r7, sp, #0
 8001154:	f107 0c10 	add.w	ip, r7, #16
 8001158:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int i;
	int current = currentPosition[bacak][eklem];
 800115c:	4947      	ldr	r1, [pc, #284]	; (800127c <kademeliArttir+0x130>)
 800115e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001160:	4613      	mov	r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	4413      	add	r3, r2
 8001166:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001168:	4413      	add	r3, r2
 800116a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800116e:	603b      	str	r3, [r7, #0]

	if(current == angle){
 8001170:	683a      	ldr	r2, [r7, #0]
 8001172:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001174:	429a      	cmp	r2, r3
 8001176:	d118      	bne.n	80011aa <kademeliArttir+0x5e>
		__HAL_TIM_SET_COMPARE(&timer, chanel, current);
 8001178:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800117a:	2b00      	cmp	r3, #0
 800117c:	d103      	bne.n	8001186 <kademeliArttir+0x3a>
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	683a      	ldr	r2, [r7, #0]
 8001182:	635a      	str	r2, [r3, #52]	; 0x34
		return;
 8001184:	e074      	b.n	8001270 <kademeliArttir+0x124>
		__HAL_TIM_SET_COMPARE(&timer, chanel, current);
 8001186:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001188:	2b04      	cmp	r3, #4
 800118a:	d103      	bne.n	8001194 <kademeliArttir+0x48>
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	6393      	str	r3, [r2, #56]	; 0x38
		return;
 8001192:	e06d      	b.n	8001270 <kademeliArttir+0x124>
		__HAL_TIM_SET_COMPARE(&timer, chanel, current);
 8001194:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001196:	2b08      	cmp	r3, #8
 8001198:	d103      	bne.n	80011a2 <kademeliArttir+0x56>
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	63d3      	str	r3, [r2, #60]	; 0x3c
		return;
 80011a0:	e066      	b.n	8001270 <kademeliArttir+0x124>
		__HAL_TIM_SET_COMPARE(&timer, chanel, current);
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	6413      	str	r3, [r2, #64]	; 0x40
		return;
 80011a8:	e062      	b.n	8001270 <kademeliArttir+0x124>
	}

	if(current < angle){
 80011aa:	683a      	ldr	r2, [r7, #0]
 80011ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80011ae:	429a      	cmp	r2, r3
 80011b0:	da2f      	bge.n	8001212 <kademeliArttir+0xc6>
		for(i=current; i<=angle; i++){
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	607b      	str	r3, [r7, #4]
 80011b6:	e01d      	b.n	80011f4 <kademeliArttir+0xa8>
			HAL_Delay(3);
 80011b8:	2003      	movs	r0, #3
 80011ba:	f001 f971 	bl	80024a0 <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&timer, chanel, i);
 80011be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d103      	bne.n	80011cc <kademeliArttir+0x80>
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	635a      	str	r2, [r3, #52]	; 0x34
 80011ca:	e010      	b.n	80011ee <kademeliArttir+0xa2>
 80011cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80011ce:	2b04      	cmp	r3, #4
 80011d0:	d103      	bne.n	80011da <kademeliArttir+0x8e>
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6393      	str	r3, [r2, #56]	; 0x38
 80011d8:	e009      	b.n	80011ee <kademeliArttir+0xa2>
 80011da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80011dc:	2b08      	cmp	r3, #8
 80011de:	d103      	bne.n	80011e8 <kademeliArttir+0x9c>
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	63d3      	str	r3, [r2, #60]	; 0x3c
 80011e6:	e002      	b.n	80011ee <kademeliArttir+0xa2>
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6413      	str	r3, [r2, #64]	; 0x40
		for(i=current; i<=angle; i++){
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	3301      	adds	r3, #1
 80011f2:	607b      	str	r3, [r7, #4]
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80011f8:	429a      	cmp	r2, r3
 80011fa:	dddd      	ble.n	80011b8 <kademeliArttir+0x6c>
		}
		currentPosition[bacak][eklem] = angle;
 80011fc:	491f      	ldr	r1, [pc, #124]	; (800127c <kademeliArttir+0x130>)
 80011fe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001200:	4613      	mov	r3, r2
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	4413      	add	r3, r2
 8001206:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001208:	4413      	add	r3, r2
 800120a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800120c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001210:	e02e      	b.n	8001270 <kademeliArttir+0x124>
	}
	else{
		for(i=current; i>=angle; i--){
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	607b      	str	r3, [r7, #4]
 8001216:	e01d      	b.n	8001254 <kademeliArttir+0x108>

			HAL_Delay(3);
 8001218:	2003      	movs	r0, #3
 800121a:	f001 f941 	bl	80024a0 <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&timer, chanel, i);
 800121e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001220:	2b00      	cmp	r3, #0
 8001222:	d103      	bne.n	800122c <kademeliArttir+0xe0>
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	635a      	str	r2, [r3, #52]	; 0x34
 800122a:	e010      	b.n	800124e <kademeliArttir+0x102>
 800122c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800122e:	2b04      	cmp	r3, #4
 8001230:	d103      	bne.n	800123a <kademeliArttir+0xee>
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6393      	str	r3, [r2, #56]	; 0x38
 8001238:	e009      	b.n	800124e <kademeliArttir+0x102>
 800123a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800123c:	2b08      	cmp	r3, #8
 800123e:	d103      	bne.n	8001248 <kademeliArttir+0xfc>
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001246:	e002      	b.n	800124e <kademeliArttir+0x102>
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6413      	str	r3, [r2, #64]	; 0x40
		for(i=current; i>=angle; i--){
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	3b01      	subs	r3, #1
 8001252:	607b      	str	r3, [r7, #4]
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001258:	429a      	cmp	r2, r3
 800125a:	dadd      	bge.n	8001218 <kademeliArttir+0xcc>
		}
		currentPosition[bacak][eklem] = angle;
 800125c:	4907      	ldr	r1, [pc, #28]	; (800127c <kademeliArttir+0x130>)
 800125e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001260:	4613      	mov	r3, r2
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	4413      	add	r3, r2
 8001266:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001268:	4413      	add	r3, r2
 800126a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800126c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

}
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001278:	b004      	add	sp, #16
 800127a:	4770      	bx	lr
 800127c:	20000008 	.word	0x20000008

08001280 <leg1_1>:


void leg1_1(int angle){
 8001280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001282:	b097      	sub	sp, #92	; 0x5c
 8001284:	af14      	add	r7, sp, #80	; 0x50
 8001286:	6078      	str	r0, [r7, #4]
	if(angle < 0)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2b00      	cmp	r3, #0
 800128c:	da01      	bge.n	8001292 <leg1_1+0x12>
		 angle = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	607b      	str	r3, [r7, #4]
	if(angle >180)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2bb4      	cmp	r3, #180	; 0xb4
 8001296:	dd01      	ble.n	800129c <leg1_1+0x1c>
		angle = 180;
 8001298:	23b4      	movs	r3, #180	; 0xb4
 800129a:	607b      	str	r3, [r7, #4]
	angle = angle + 35;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3323      	adds	r3, #35	; 0x23
 80012a0:	607b      	str	r3, [r7, #4]
	kademeliArttir(htim4, TIM_CHANNEL_1, 1, 1, angle, 35);
 80012a2:	4e10      	ldr	r6, [pc, #64]	; (80012e4 <leg1_1+0x64>)
 80012a4:	2323      	movs	r3, #35	; 0x23
 80012a6:	9312      	str	r3, [sp, #72]	; 0x48
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	9311      	str	r3, [sp, #68]	; 0x44
 80012ac:	2301      	movs	r3, #1
 80012ae:	9310      	str	r3, [sp, #64]	; 0x40
 80012b0:	2301      	movs	r3, #1
 80012b2:	930f      	str	r3, [sp, #60]	; 0x3c
 80012b4:	2300      	movs	r3, #0
 80012b6:	930e      	str	r3, [sp, #56]	; 0x38
 80012b8:	466d      	mov	r5, sp
 80012ba:	f106 0410 	add.w	r4, r6, #16
 80012be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80012ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80012d2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80012d6:	f7ff ff39 	bl	800114c <kademeliArttir>
	//__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, angle);
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20000130 	.word	0x20000130

080012e8 <leg1_2>:

void leg1_2(int angle){
 80012e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012ea:	b097      	sub	sp, #92	; 0x5c
 80012ec:	af14      	add	r7, sp, #80	; 0x50
 80012ee:	6078      	str	r0, [r7, #4]
	if(angle < 0)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	da01      	bge.n	80012fa <leg1_2+0x12>
		 angle = 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	607b      	str	r3, [r7, #4]
	if(angle >180)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2bb4      	cmp	r3, #180	; 0xb4
 80012fe:	dd01      	ble.n	8001304 <leg1_2+0x1c>
		angle = 180;
 8001300:	23b4      	movs	r3, #180	; 0xb4
 8001302:	607b      	str	r3, [r7, #4]
	angle = angle + 48;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3330      	adds	r3, #48	; 0x30
 8001308:	607b      	str	r3, [r7, #4]
	kademeliArttir(htim3, TIM_CHANNEL_3, 1, 2, angle, 48);
 800130a:	4e10      	ldr	r6, [pc, #64]	; (800134c <leg1_2+0x64>)
 800130c:	2330      	movs	r3, #48	; 0x30
 800130e:	9312      	str	r3, [sp, #72]	; 0x48
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	9311      	str	r3, [sp, #68]	; 0x44
 8001314:	2302      	movs	r3, #2
 8001316:	9310      	str	r3, [sp, #64]	; 0x40
 8001318:	2301      	movs	r3, #1
 800131a:	930f      	str	r3, [sp, #60]	; 0x3c
 800131c:	2308      	movs	r3, #8
 800131e:	930e      	str	r3, [sp, #56]	; 0x38
 8001320:	466d      	mov	r5, sp
 8001322:	f106 0410 	add.w	r4, r6, #16
 8001326:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001328:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800132a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800132c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800132e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001330:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001332:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001336:	e885 0003 	stmia.w	r5, {r0, r1}
 800133a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800133e:	f7ff ff05 	bl	800114c <kademeliArttir>
	//__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, angle);
}
 8001342:	bf00      	nop
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800134a:	bf00      	nop
 800134c:	200000e8 	.word	0x200000e8

08001350 <leg1_3>:

void leg1_3(int angle){
 8001350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001352:	b097      	sub	sp, #92	; 0x5c
 8001354:	af14      	add	r7, sp, #80	; 0x50
 8001356:	6078      	str	r0, [r7, #4]
	if(angle < 0)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2b00      	cmp	r3, #0
 800135c:	da01      	bge.n	8001362 <leg1_3+0x12>
		 angle = 0;
 800135e:	2300      	movs	r3, #0
 8001360:	607b      	str	r3, [r7, #4]
	if(angle >180)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2bb4      	cmp	r3, #180	; 0xb4
 8001366:	dd01      	ble.n	800136c <leg1_3+0x1c>
		angle = 180;
 8001368:	23b4      	movs	r3, #180	; 0xb4
 800136a:	607b      	str	r3, [r7, #4]
	angle = angle + 48;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3330      	adds	r3, #48	; 0x30
 8001370:	607b      	str	r3, [r7, #4]
	kademeliArttir(htim1, TIM_CHANNEL_2, 1, 3, angle, 48);
 8001372:	4e10      	ldr	r6, [pc, #64]	; (80013b4 <leg1_3+0x64>)
 8001374:	2330      	movs	r3, #48	; 0x30
 8001376:	9312      	str	r3, [sp, #72]	; 0x48
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	9311      	str	r3, [sp, #68]	; 0x44
 800137c:	2303      	movs	r3, #3
 800137e:	9310      	str	r3, [sp, #64]	; 0x40
 8001380:	2301      	movs	r3, #1
 8001382:	930f      	str	r3, [sp, #60]	; 0x3c
 8001384:	2304      	movs	r3, #4
 8001386:	930e      	str	r3, [sp, #56]	; 0x38
 8001388:	466d      	mov	r5, sp
 800138a:	f106 0410 	add.w	r4, r6, #16
 800138e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001390:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001392:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001394:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001396:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001398:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800139a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800139e:	e885 0003 	stmia.w	r5, {r0, r1}
 80013a2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80013a6:	f7ff fed1 	bl	800114c <kademeliArttir>
	//__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, angle);
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013b2:	bf00      	nop
 80013b4:	200000a0 	.word	0x200000a0

080013b8 <leg2_1>:

void leg2_1(int angle){
 80013b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ba:	b097      	sub	sp, #92	; 0x5c
 80013bc:	af14      	add	r7, sp, #80	; 0x50
 80013be:	6078      	str	r0, [r7, #4]

	if(angle < 0)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	da01      	bge.n	80013ca <leg2_1+0x12>
		 angle = 0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	607b      	str	r3, [r7, #4]
	if(angle >180)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2bb4      	cmp	r3, #180	; 0xb4
 80013ce:	dd01      	ble.n	80013d4 <leg2_1+0x1c>
		angle = 180;
 80013d0:	23b4      	movs	r3, #180	; 0xb4
 80013d2:	607b      	str	r3, [r7, #4]
	angle = angle + 45;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	332d      	adds	r3, #45	; 0x2d
 80013d8:	607b      	str	r3, [r7, #4]
	kademeliArttir(htim1, TIM_CHANNEL_3, 2, 1, angle, 45);
 80013da:	4e10      	ldr	r6, [pc, #64]	; (800141c <leg2_1+0x64>)
 80013dc:	232d      	movs	r3, #45	; 0x2d
 80013de:	9312      	str	r3, [sp, #72]	; 0x48
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	9311      	str	r3, [sp, #68]	; 0x44
 80013e4:	2301      	movs	r3, #1
 80013e6:	9310      	str	r3, [sp, #64]	; 0x40
 80013e8:	2302      	movs	r3, #2
 80013ea:	930f      	str	r3, [sp, #60]	; 0x3c
 80013ec:	2308      	movs	r3, #8
 80013ee:	930e      	str	r3, [sp, #56]	; 0x38
 80013f0:	466d      	mov	r5, sp
 80013f2:	f106 0410 	add.w	r4, r6, #16
 80013f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001400:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001402:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001406:	e885 0003 	stmia.w	r5, {r0, r1}
 800140a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800140e:	f7ff fe9d 	bl	800114c <kademeliArttir>
	//__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, angle);
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800141a:	bf00      	nop
 800141c:	200000a0 	.word	0x200000a0

08001420 <leg2_2>:

void leg2_2(int angle){
 8001420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001422:	b097      	sub	sp, #92	; 0x5c
 8001424:	af14      	add	r7, sp, #80	; 0x50
 8001426:	6078      	str	r0, [r7, #4]

	if(angle < 0)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	da01      	bge.n	8001432 <leg2_2+0x12>
		 angle = 0;
 800142e:	2300      	movs	r3, #0
 8001430:	607b      	str	r3, [r7, #4]
	if(angle >180)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2bb4      	cmp	r3, #180	; 0xb4
 8001436:	dd01      	ble.n	800143c <leg2_2+0x1c>
		angle = 180;
 8001438:	23b4      	movs	r3, #180	; 0xb4
 800143a:	607b      	str	r3, [r7, #4]
	angle = angle + 47;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	332f      	adds	r3, #47	; 0x2f
 8001440:	607b      	str	r3, [r7, #4]
	kademeliArttir(htim5, TIM_CHANNEL_3, 2, 2, angle, 47);
 8001442:	4e10      	ldr	r6, [pc, #64]	; (8001484 <leg2_2+0x64>)
 8001444:	232f      	movs	r3, #47	; 0x2f
 8001446:	9312      	str	r3, [sp, #72]	; 0x48
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	9311      	str	r3, [sp, #68]	; 0x44
 800144c:	2302      	movs	r3, #2
 800144e:	9310      	str	r3, [sp, #64]	; 0x40
 8001450:	2302      	movs	r3, #2
 8001452:	930f      	str	r3, [sp, #60]	; 0x3c
 8001454:	2308      	movs	r3, #8
 8001456:	930e      	str	r3, [sp, #56]	; 0x38
 8001458:	466d      	mov	r5, sp
 800145a:	f106 0410 	add.w	r4, r6, #16
 800145e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001460:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001462:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001464:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001466:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001468:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800146a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800146e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001472:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001476:	f7ff fe69 	bl	800114c <kademeliArttir>
	//__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_3, angle);
}
 800147a:	bf00      	nop
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001482:	bf00      	nop
 8001484:	20000178 	.word	0x20000178

08001488 <leg2_3>:

void leg2_3(int angle){
 8001488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800148a:	b097      	sub	sp, #92	; 0x5c
 800148c:	af14      	add	r7, sp, #80	; 0x50
 800148e:	6078      	str	r0, [r7, #4]

	if(angle < 0)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2b00      	cmp	r3, #0
 8001494:	da01      	bge.n	800149a <leg2_3+0x12>
		 angle = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	607b      	str	r3, [r7, #4]
	if(angle >180)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2bb4      	cmp	r3, #180	; 0xb4
 800149e:	dd01      	ble.n	80014a4 <leg2_3+0x1c>
		angle = 180;
 80014a0:	23b4      	movs	r3, #180	; 0xb4
 80014a2:	607b      	str	r3, [r7, #4]
	angle = angle + 32;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	3320      	adds	r3, #32
 80014a8:	607b      	str	r3, [r7, #4]
	kademeliArttir(htim5, TIM_CHANNEL_1, 2, 3, angle, 32);
 80014aa:	4e10      	ldr	r6, [pc, #64]	; (80014ec <leg2_3+0x64>)
 80014ac:	2320      	movs	r3, #32
 80014ae:	9312      	str	r3, [sp, #72]	; 0x48
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	9311      	str	r3, [sp, #68]	; 0x44
 80014b4:	2303      	movs	r3, #3
 80014b6:	9310      	str	r3, [sp, #64]	; 0x40
 80014b8:	2302      	movs	r3, #2
 80014ba:	930f      	str	r3, [sp, #60]	; 0x3c
 80014bc:	2300      	movs	r3, #0
 80014be:	930e      	str	r3, [sp, #56]	; 0x38
 80014c0:	466d      	mov	r5, sp
 80014c2:	f106 0410 	add.w	r4, r6, #16
 80014c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014d6:	e885 0003 	stmia.w	r5, {r0, r1}
 80014da:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80014de:	f7ff fe35 	bl	800114c <kademeliArttir>
	//__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, angle);
}
 80014e2:	bf00      	nop
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20000178 	.word	0x20000178

080014f0 <leg3_1>:

void leg3_1(int angle){
 80014f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014f2:	b097      	sub	sp, #92	; 0x5c
 80014f4:	af14      	add	r7, sp, #80	; 0x50
 80014f6:	6078      	str	r0, [r7, #4]

	if(angle < 0)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	da01      	bge.n	8001502 <leg3_1+0x12>
		 angle = 0;
 80014fe:	2300      	movs	r3, #0
 8001500:	607b      	str	r3, [r7, #4]
	if(angle >180)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2bb4      	cmp	r3, #180	; 0xb4
 8001506:	dd01      	ble.n	800150c <leg3_1+0x1c>
		angle = 180;
 8001508:	23b4      	movs	r3, #180	; 0xb4
 800150a:	607b      	str	r3, [r7, #4]
	angle = angle + 40;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	3328      	adds	r3, #40	; 0x28
 8001510:	607b      	str	r3, [r7, #4]
	kademeliArttir(htim4, TIM_CHANNEL_4, 3, 1, angle, 45);
 8001512:	4e10      	ldr	r6, [pc, #64]	; (8001554 <leg3_1+0x64>)
 8001514:	232d      	movs	r3, #45	; 0x2d
 8001516:	9312      	str	r3, [sp, #72]	; 0x48
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	9311      	str	r3, [sp, #68]	; 0x44
 800151c:	2301      	movs	r3, #1
 800151e:	9310      	str	r3, [sp, #64]	; 0x40
 8001520:	2303      	movs	r3, #3
 8001522:	930f      	str	r3, [sp, #60]	; 0x3c
 8001524:	230c      	movs	r3, #12
 8001526:	930e      	str	r3, [sp, #56]	; 0x38
 8001528:	466d      	mov	r5, sp
 800152a:	f106 0410 	add.w	r4, r6, #16
 800152e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001530:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001532:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001534:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001536:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001538:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800153a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800153e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001542:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001546:	f7ff fe01 	bl	800114c <kademeliArttir>
	//__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, angle);

}
 800154a:	bf00      	nop
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001552:	bf00      	nop
 8001554:	20000130 	.word	0x20000130

08001558 <leg3_2>:

void leg3_2(int angle){
 8001558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800155a:	b097      	sub	sp, #92	; 0x5c
 800155c:	af14      	add	r7, sp, #80	; 0x50
 800155e:	6078      	str	r0, [r7, #4]

	if(angle < 0)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	da01      	bge.n	800156a <leg3_2+0x12>
		 angle = 0;
 8001566:	2300      	movs	r3, #0
 8001568:	607b      	str	r3, [r7, #4]
	if(angle >180)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2bb4      	cmp	r3, #180	; 0xb4
 800156e:	dd01      	ble.n	8001574 <leg3_2+0x1c>
		angle = 180;
 8001570:	23b4      	movs	r3, #180	; 0xb4
 8001572:	607b      	str	r3, [r7, #4]
	angle = angle + 47;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	332f      	adds	r3, #47	; 0x2f
 8001578:	607b      	str	r3, [r7, #4]
	kademeliArttir(htim4, TIM_CHANNEL_2, 3, 2, angle, 47);
 800157a:	4e10      	ldr	r6, [pc, #64]	; (80015bc <leg3_2+0x64>)
 800157c:	232f      	movs	r3, #47	; 0x2f
 800157e:	9312      	str	r3, [sp, #72]	; 0x48
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	9311      	str	r3, [sp, #68]	; 0x44
 8001584:	2302      	movs	r3, #2
 8001586:	9310      	str	r3, [sp, #64]	; 0x40
 8001588:	2303      	movs	r3, #3
 800158a:	930f      	str	r3, [sp, #60]	; 0x3c
 800158c:	2304      	movs	r3, #4
 800158e:	930e      	str	r3, [sp, #56]	; 0x38
 8001590:	466d      	mov	r5, sp
 8001592:	f106 0410 	add.w	r4, r6, #16
 8001596:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001598:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800159a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800159c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800159e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015a6:	e885 0003 	stmia.w	r5, {r0, r1}
 80015aa:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80015ae:	f7ff fdcd 	bl	800114c <kademeliArttir>
	//__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, angle);

}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015ba:	bf00      	nop
 80015bc:	20000130 	.word	0x20000130

080015c0 <leg3_3>:

void leg3_3(int angle){
 80015c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015c2:	b097      	sub	sp, #92	; 0x5c
 80015c4:	af14      	add	r7, sp, #80	; 0x50
 80015c6:	6078      	str	r0, [r7, #4]
	if(angle < 0)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	da01      	bge.n	80015d2 <leg3_3+0x12>
		 angle = 0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	607b      	str	r3, [r7, #4]
	if(angle >180)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2bb4      	cmp	r3, #180	; 0xb4
 80015d6:	dd01      	ble.n	80015dc <leg3_3+0x1c>
		angle = 180;
 80015d8:	23b4      	movs	r3, #180	; 0xb4
 80015da:	607b      	str	r3, [r7, #4]
	angle = angle + 37;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3325      	adds	r3, #37	; 0x25
 80015e0:	607b      	str	r3, [r7, #4]
	kademeliArttir(htim3, TIM_CHANNEL_4, 3, 3, angle, 37);
 80015e2:	4e10      	ldr	r6, [pc, #64]	; (8001624 <leg3_3+0x64>)
 80015e4:	2325      	movs	r3, #37	; 0x25
 80015e6:	9312      	str	r3, [sp, #72]	; 0x48
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	9311      	str	r3, [sp, #68]	; 0x44
 80015ec:	2303      	movs	r3, #3
 80015ee:	9310      	str	r3, [sp, #64]	; 0x40
 80015f0:	2303      	movs	r3, #3
 80015f2:	930f      	str	r3, [sp, #60]	; 0x3c
 80015f4:	230c      	movs	r3, #12
 80015f6:	930e      	str	r3, [sp, #56]	; 0x38
 80015f8:	466d      	mov	r5, sp
 80015fa:	f106 0410 	add.w	r4, r6, #16
 80015fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001600:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001602:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001604:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001606:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001608:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800160a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800160e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001612:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001616:	f7ff fd99 	bl	800114c <kademeliArttir>
	//__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, angle);
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001622:	bf00      	nop
 8001624:	200000e8 	.word	0x200000e8

08001628 <leg4_1>:

void leg4_1(int angle){
 8001628:	b5f0      	push	{r4, r5, r6, r7, lr}
 800162a:	b097      	sub	sp, #92	; 0x5c
 800162c:	af14      	add	r7, sp, #80	; 0x50
 800162e:	6078      	str	r0, [r7, #4]

	if(angle < 0)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2b00      	cmp	r3, #0
 8001634:	da01      	bge.n	800163a <leg4_1+0x12>
		 angle = 0;
 8001636:	2300      	movs	r3, #0
 8001638:	607b      	str	r3, [r7, #4]
	if(angle >180)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2bb4      	cmp	r3, #180	; 0xb4
 800163e:	dd01      	ble.n	8001644 <leg4_1+0x1c>
		angle = 180;
 8001640:	23b4      	movs	r3, #180	; 0xb4
 8001642:	607b      	str	r3, [r7, #4]
	angle = angle + 45;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	332d      	adds	r3, #45	; 0x2d
 8001648:	607b      	str	r3, [r7, #4]
	kademeliArttir(htim5, TIM_CHANNEL_2, 4, 1, angle, 45);
 800164a:	4e10      	ldr	r6, [pc, #64]	; (800168c <leg4_1+0x64>)
 800164c:	232d      	movs	r3, #45	; 0x2d
 800164e:	9312      	str	r3, [sp, #72]	; 0x48
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	9311      	str	r3, [sp, #68]	; 0x44
 8001654:	2301      	movs	r3, #1
 8001656:	9310      	str	r3, [sp, #64]	; 0x40
 8001658:	2304      	movs	r3, #4
 800165a:	930f      	str	r3, [sp, #60]	; 0x3c
 800165c:	2304      	movs	r3, #4
 800165e:	930e      	str	r3, [sp, #56]	; 0x38
 8001660:	466d      	mov	r5, sp
 8001662:	f106 0410 	add.w	r4, r6, #16
 8001666:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001668:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800166a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800166c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800166e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001670:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001672:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001676:	e885 0003 	stmia.w	r5, {r0, r1}
 800167a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800167e:	f7ff fd65 	bl	800114c <kademeliArttir>
	//__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, angle);

}
 8001682:	bf00      	nop
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800168a:	bf00      	nop
 800168c:	20000178 	.word	0x20000178

08001690 <leg4_2>:

void leg4_2(int angle){
 8001690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001692:	b097      	sub	sp, #92	; 0x5c
 8001694:	af14      	add	r7, sp, #80	; 0x50
 8001696:	6078      	str	r0, [r7, #4]

	if(angle < 0)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2b00      	cmp	r3, #0
 800169c:	da01      	bge.n	80016a2 <leg4_2+0x12>
		 angle = 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	607b      	str	r3, [r7, #4]
	if(angle >180)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2bb4      	cmp	r3, #180	; 0xb4
 80016a6:	dd01      	ble.n	80016ac <leg4_2+0x1c>
		angle = 180;
 80016a8:	23b4      	movs	r3, #180	; 0xb4
 80016aa:	607b      	str	r3, [r7, #4]
	angle = angle + 40;//37
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	3328      	adds	r3, #40	; 0x28
 80016b0:	607b      	str	r3, [r7, #4]
	kademeliArttir(htim1,TIM_CHANNEL_4, 4, 2, angle, 37);
 80016b2:	4e10      	ldr	r6, [pc, #64]	; (80016f4 <leg4_2+0x64>)
 80016b4:	2325      	movs	r3, #37	; 0x25
 80016b6:	9312      	str	r3, [sp, #72]	; 0x48
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	9311      	str	r3, [sp, #68]	; 0x44
 80016bc:	2302      	movs	r3, #2
 80016be:	9310      	str	r3, [sp, #64]	; 0x40
 80016c0:	2304      	movs	r3, #4
 80016c2:	930f      	str	r3, [sp, #60]	; 0x3c
 80016c4:	230c      	movs	r3, #12
 80016c6:	930e      	str	r3, [sp, #56]	; 0x38
 80016c8:	466d      	mov	r5, sp
 80016ca:	f106 0410 	add.w	r4, r6, #16
 80016ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016de:	e885 0003 	stmia.w	r5, {r0, r1}
 80016e2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80016e6:	f7ff fd31 	bl	800114c <kademeliArttir>
	//__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, angle);

}
 80016ea:	bf00      	nop
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016f2:	bf00      	nop
 80016f4:	200000a0 	.word	0x200000a0

080016f8 <leg4_3>:

void leg4_3(int angle){
 80016f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016fa:	b097      	sub	sp, #92	; 0x5c
 80016fc:	af14      	add	r7, sp, #80	; 0x50
 80016fe:	6078      	str	r0, [r7, #4]

	if(angle < 0)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2b00      	cmp	r3, #0
 8001704:	da01      	bge.n	800170a <leg4_3+0x12>
		 angle = 0;
 8001706:	2300      	movs	r3, #0
 8001708:	607b      	str	r3, [r7, #4]
	if(angle >180)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2bb4      	cmp	r3, #180	; 0xb4
 800170e:	dd01      	ble.n	8001714 <leg4_3+0x1c>
		angle = 180;
 8001710:	23b4      	movs	r3, #180	; 0xb4
 8001712:	607b      	str	r3, [r7, #4]
	angle = angle + 45;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	332d      	adds	r3, #45	; 0x2d
 8001718:	607b      	str	r3, [r7, #4]
	kademeliArttir(htim1, TIM_CHANNEL_1, 4, 3, angle, 45);
 800171a:	4e10      	ldr	r6, [pc, #64]	; (800175c <leg4_3+0x64>)
 800171c:	232d      	movs	r3, #45	; 0x2d
 800171e:	9312      	str	r3, [sp, #72]	; 0x48
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	9311      	str	r3, [sp, #68]	; 0x44
 8001724:	2303      	movs	r3, #3
 8001726:	9310      	str	r3, [sp, #64]	; 0x40
 8001728:	2304      	movs	r3, #4
 800172a:	930f      	str	r3, [sp, #60]	; 0x3c
 800172c:	2300      	movs	r3, #0
 800172e:	930e      	str	r3, [sp, #56]	; 0x38
 8001730:	466d      	mov	r5, sp
 8001732:	f106 0410 	add.w	r4, r6, #16
 8001736:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001738:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800173a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800173c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800173e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001740:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001742:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001746:	e885 0003 	stmia.w	r5, {r0, r1}
 800174a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800174e:	f7ff fcfd 	bl	800114c <kademeliArttir>
	//__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, angle);

}
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800175a:	bf00      	nop
 800175c:	200000a0 	.word	0x200000a0

08001760 <robot_all_leg_90>:





void robot_all_leg_90(void) {
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0

	int i = 90;
 8001766:	235a      	movs	r3, #90	; 0x5a
 8001768:	607b      	str	r3, [r7, #4]

	leg1_1(i);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7ff fd88 	bl	8001280 <leg1_1>
	HAL_Delay(500);
 8001770:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001774:	f000 fe94 	bl	80024a0 <HAL_Delay>
	leg1_2(i);
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f7ff fdb5 	bl	80012e8 <leg1_2>
	HAL_Delay(500);
 800177e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001782:	f000 fe8d 	bl	80024a0 <HAL_Delay>
	leg1_3(i);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7ff fde2 	bl	8001350 <leg1_3>
	HAL_Delay(1500);
 800178c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001790:	f000 fe86 	bl	80024a0 <HAL_Delay>

	leg2_1(i);
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f7ff fe0f 	bl	80013b8 <leg2_1>
	HAL_Delay(500);
 800179a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800179e:	f000 fe7f 	bl	80024a0 <HAL_Delay>
	leg2_2(i);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f7ff fe3c 	bl	8001420 <leg2_2>
	HAL_Delay(500);
 80017a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017ac:	f000 fe78 	bl	80024a0 <HAL_Delay>
	leg2_3(i);
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f7ff fe69 	bl	8001488 <leg2_3>
	HAL_Delay(1500);
 80017b6:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80017ba:	f000 fe71 	bl	80024a0 <HAL_Delay>

	leg3_1(i);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f7ff fe96 	bl	80014f0 <leg3_1>
	HAL_Delay(500);
 80017c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017c8:	f000 fe6a 	bl	80024a0 <HAL_Delay>
	leg3_2(i);
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f7ff fec3 	bl	8001558 <leg3_2>
	HAL_Delay(500);
 80017d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017d6:	f000 fe63 	bl	80024a0 <HAL_Delay>
	leg3_3(i);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f7ff fef0 	bl	80015c0 <leg3_3>
	HAL_Delay(1500);
 80017e0:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80017e4:	f000 fe5c 	bl	80024a0 <HAL_Delay>

	leg4_1(i);
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f7ff ff1d 	bl	8001628 <leg4_1>
	HAL_Delay(500);
 80017ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017f2:	f000 fe55 	bl	80024a0 <HAL_Delay>
	leg4_2(i);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f7ff ff4a 	bl	8001690 <leg4_2>
	HAL_Delay(500);
 80017fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001800:	f000 fe4e 	bl	80024a0 <HAL_Delay>
	leg4_3(i);
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f7ff ff77 	bl	80016f8 <leg4_3>
	HAL_Delay(500);
 800180a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800180e:	f000 fe47 	bl	80024a0 <HAL_Delay>

}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
	...

0800181c <robot_tims_init>:
	leg3_3(40);
	HAL_Delay(500);

}

void robot_tims_init(void) {
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001820:	2100      	movs	r1, #0
 8001822:	4818      	ldr	r0, [pc, #96]	; (8001884 <robot_tims_init+0x68>)
 8001824:	f001 fd7e 	bl	8003324 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001828:	2104      	movs	r1, #4
 800182a:	4816      	ldr	r0, [pc, #88]	; (8001884 <robot_tims_init+0x68>)
 800182c:	f001 fd7a 	bl	8003324 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001830:	2108      	movs	r1, #8
 8001832:	4814      	ldr	r0, [pc, #80]	; (8001884 <robot_tims_init+0x68>)
 8001834:	f001 fd76 	bl	8003324 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001838:	210c      	movs	r1, #12
 800183a:	4812      	ldr	r0, [pc, #72]	; (8001884 <robot_tims_init+0x68>)
 800183c:	f001 fd72 	bl	8003324 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001840:	2108      	movs	r1, #8
 8001842:	4811      	ldr	r0, [pc, #68]	; (8001888 <robot_tims_init+0x6c>)
 8001844:	f001 fd6e 	bl	8003324 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001848:	210c      	movs	r1, #12
 800184a:	480f      	ldr	r0, [pc, #60]	; (8001888 <robot_tims_init+0x6c>)
 800184c:	f001 fd6a 	bl	8003324 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001850:	2100      	movs	r1, #0
 8001852:	480e      	ldr	r0, [pc, #56]	; (800188c <robot_tims_init+0x70>)
 8001854:	f001 fd66 	bl	8003324 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001858:	2104      	movs	r1, #4
 800185a:	480c      	ldr	r0, [pc, #48]	; (800188c <robot_tims_init+0x70>)
 800185c:	f001 fd62 	bl	8003324 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001860:	210c      	movs	r1, #12
 8001862:	480a      	ldr	r0, [pc, #40]	; (800188c <robot_tims_init+0x70>)
 8001864:	f001 fd5e 	bl	8003324 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001868:	2100      	movs	r1, #0
 800186a:	4809      	ldr	r0, [pc, #36]	; (8001890 <robot_tims_init+0x74>)
 800186c:	f001 fd5a 	bl	8003324 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8001870:	2104      	movs	r1, #4
 8001872:	4807      	ldr	r0, [pc, #28]	; (8001890 <robot_tims_init+0x74>)
 8001874:	f001 fd56 	bl	8003324 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 8001878:	2108      	movs	r1, #8
 800187a:	4805      	ldr	r0, [pc, #20]	; (8001890 <robot_tims_init+0x74>)
 800187c:	f001 fd52 	bl	8003324 <HAL_TIM_PWM_Start>

}
 8001880:	bf00      	nop
 8001882:	bd80      	pop	{r7, pc}
 8001884:	200000a0 	.word	0x200000a0
 8001888:	200000e8 	.word	0x200000e8
 800188c:	20000130 	.word	0x20000130
 8001890:	20000178 	.word	0x20000178

08001894 <initPosition>:

void initPosition() {
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0

	leg1_3(d);
 8001898:	4b30      	ldr	r3, [pc, #192]	; (800195c <initPosition+0xc8>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff fd57 	bl	8001350 <leg1_3>
	HAL_Delay(initDelay);
 80018a2:	2064      	movs	r0, #100	; 0x64
 80018a4:	f000 fdfc 	bl	80024a0 <HAL_Delay>
	leg2_3(b);
 80018a8:	4b2d      	ldr	r3, [pc, #180]	; (8001960 <initPosition+0xcc>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff fdeb 	bl	8001488 <leg2_3>
	HAL_Delay(initDelay);
 80018b2:	2064      	movs	r0, #100	; 0x64
 80018b4:	f000 fdf4 	bl	80024a0 <HAL_Delay>
	leg3_3(b);
 80018b8:	4b29      	ldr	r3, [pc, #164]	; (8001960 <initPosition+0xcc>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff fe7f 	bl	80015c0 <leg3_3>
	HAL_Delay(initDelay);
 80018c2:	2064      	movs	r0, #100	; 0x64
 80018c4:	f000 fdec 	bl	80024a0 <HAL_Delay>
	leg4_3(d);
 80018c8:	4b24      	ldr	r3, [pc, #144]	; (800195c <initPosition+0xc8>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff ff13 	bl	80016f8 <leg4_3>
	HAL_Delay(initDelay);
 80018d2:	2064      	movs	r0, #100	; 0x64
 80018d4:	f000 fde4 	bl	80024a0 <HAL_Delay>

	leg1_2(b);
 80018d8:	4b21      	ldr	r3, [pc, #132]	; (8001960 <initPosition+0xcc>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff fd03 	bl	80012e8 <leg1_2>
	HAL_Delay(initDelay);
 80018e2:	2064      	movs	r0, #100	; 0x64
 80018e4:	f000 fddc 	bl	80024a0 <HAL_Delay>
	leg2_2(d);
 80018e8:	4b1c      	ldr	r3, [pc, #112]	; (800195c <initPosition+0xc8>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff fd97 	bl	8001420 <leg2_2>
	HAL_Delay(initDelay);
 80018f2:	2064      	movs	r0, #100	; 0x64
 80018f4:	f000 fdd4 	bl	80024a0 <HAL_Delay>
	leg3_2(d);
 80018f8:	4b18      	ldr	r3, [pc, #96]	; (800195c <initPosition+0xc8>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff fe2b 	bl	8001558 <leg3_2>
	HAL_Delay(initDelay);
 8001902:	2064      	movs	r0, #100	; 0x64
 8001904:	f000 fdcc 	bl	80024a0 <HAL_Delay>
	leg4_2(b);
 8001908:	4b15      	ldr	r3, [pc, #84]	; (8001960 <initPosition+0xcc>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff febf 	bl	8001690 <leg4_2>
	HAL_Delay(initDelay);
 8001912:	2064      	movs	r0, #100	; 0x64
 8001914:	f000 fdc4 	bl	80024a0 <HAL_Delay>

	leg1_1(b);
 8001918:	4b11      	ldr	r3, [pc, #68]	; (8001960 <initPosition+0xcc>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff fcaf 	bl	8001280 <leg1_1>
	HAL_Delay(initDelay);
 8001922:	2064      	movs	r0, #100	; 0x64
 8001924:	f000 fdbc 	bl	80024a0 <HAL_Delay>
	leg2_1(d);
 8001928:	4b0c      	ldr	r3, [pc, #48]	; (800195c <initPosition+0xc8>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff fd43 	bl	80013b8 <leg2_1>
	HAL_Delay(initDelay);
 8001932:	2064      	movs	r0, #100	; 0x64
 8001934:	f000 fdb4 	bl	80024a0 <HAL_Delay>
	leg3_1(d);
 8001938:	4b08      	ldr	r3, [pc, #32]	; (800195c <initPosition+0xc8>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff fdd7 	bl	80014f0 <leg3_1>
	HAL_Delay(initDelay);
 8001942:	2064      	movs	r0, #100	; 0x64
 8001944:	f000 fdac 	bl	80024a0 <HAL_Delay>
	leg4_1(b);
 8001948:	4b05      	ldr	r3, [pc, #20]	; (8001960 <initPosition+0xcc>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff fe6b 	bl	8001628 <leg4_1>
	HAL_Delay(initDelay);
 8001952:	2064      	movs	r0, #100	; 0x64
 8001954:	f000 fda4 	bl	80024a0 <HAL_Delay>

}
 8001958:	bf00      	nop
 800195a:	bd80      	pop	{r7, pc}
 800195c:	20000004 	.word	0x20000004
 8001960:	20000000 	.word	0x20000000

08001964 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800196a:	f000 fd27 	bl	80023bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800196e:	f000 f8c5 	bl	8001afc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001972:	f000 fb19 	bl	8001fa8 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001976:	f000 f929 	bl	8001bcc <MX_TIM1_Init>
  MX_TIM3_Init();
 800197a:	f000 f9cf 	bl	8001d1c <MX_TIM3_Init>
  MX_TIM4_Init();
 800197e:	f000 fa33 	bl	8001de8 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001982:	f000 faa1 	bl	8001ec8 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  robot_tims_init();
 8001986:	f7ff ff49 	bl	800181c <robot_tims_init>
  HAL_Delay(50);
 800198a:	2032      	movs	r0, #50	; 0x32
 800198c:	f000 fd88 	bl	80024a0 <HAL_Delay>

  robot_all_leg_90();
 8001990:	f7ff fee6 	bl	8001760 <robot_all_leg_90>
  HAL_Delay(500);
 8001994:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001998:	f000 fd82 	bl	80024a0 <HAL_Delay>

  initPosition();
 800199c:	f7ff ff7a 	bl	8001894 <initPosition>
  HAL_Delay(500);
 80019a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019a4:	f000 fd7c 	bl	80024a0 <HAL_Delay>

  InitializeGyro();
 80019a8:	f000 fb50 	bl	800204c <InitializeGyro>
  InitializeAccel();
 80019ac:	f000 fb54 	bl	8002058 <InitializeAccel>

    /* USER CODE BEGIN 3 */

//		moveForward();

		for (int i = 0; i < 15; i++)
 80019b0:	2300      	movs	r3, #0
 80019b2:	607b      	str	r3, [r7, #4]
 80019b4:	e011      	b.n	80019da <main+0x76>
		{
			DisplayAxisValues();
 80019b6:	f7ff fa5f 	bl	8000e78 <DisplayAxisValues>
			totalData += accelX;
 80019ba:	4b49      	ldr	r3, [pc, #292]	; (8001ae0 <main+0x17c>)
 80019bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019c0:	b29a      	uxth	r2, r3
 80019c2:	4b48      	ldr	r3, [pc, #288]	; (8001ae4 <main+0x180>)
 80019c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	4413      	add	r3, r2
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	b21a      	sxth	r2, r3
 80019d0:	4b43      	ldr	r3, [pc, #268]	; (8001ae0 <main+0x17c>)
 80019d2:	801a      	strh	r2, [r3, #0]
		for (int i = 0; i < 15; i++)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3301      	adds	r3, #1
 80019d8:	607b      	str	r3, [r7, #4]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2b0e      	cmp	r3, #14
 80019de:	ddea      	ble.n	80019b6 <main+0x52>
		}

		filtredData = totalData / 15;
 80019e0:	4b3f      	ldr	r3, [pc, #252]	; (8001ae0 <main+0x17c>)
 80019e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019e6:	4a40      	ldr	r2, [pc, #256]	; (8001ae8 <main+0x184>)
 80019e8:	fb82 1203 	smull	r1, r2, r2, r3
 80019ec:	441a      	add	r2, r3
 80019ee:	10d2      	asrs	r2, r2, #3
 80019f0:	17db      	asrs	r3, r3, #31
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	b21a      	sxth	r2, r3
 80019f6:	4b3d      	ldr	r3, [pc, #244]	; (8001aec <main+0x188>)
 80019f8:	801a      	strh	r2, [r3, #0]
		totalData = 0;
 80019fa:	4b39      	ldr	r3, [pc, #228]	; (8001ae0 <main+0x17c>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	801a      	strh	r2, [r3, #0]


		if (filtredData >= 800)
 8001a00:	4b3a      	ldr	r3, [pc, #232]	; (8001aec <main+0x188>)
 8001a02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a06:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001a0a:	db31      	blt.n	8001a70 <main+0x10c>
		{
			angel2 = (filtredData / 60);
 8001a0c:	4b37      	ldr	r3, [pc, #220]	; (8001aec <main+0x188>)
 8001a0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a12:	4a35      	ldr	r2, [pc, #212]	; (8001ae8 <main+0x184>)
 8001a14:	fb82 1203 	smull	r1, r2, r2, r3
 8001a18:	441a      	add	r2, r3
 8001a1a:	1152      	asrs	r2, r2, #5
 8001a1c:	17db      	asrs	r3, r3, #31
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	b21b      	sxth	r3, r3
 8001a22:	461a      	mov	r2, r3
 8001a24:	4b32      	ldr	r3, [pc, #200]	; (8001af0 <main+0x18c>)
 8001a26:	601a      	str	r2, [r3, #0]
			leg1_2(b + angel2);
 8001a28:	4b32      	ldr	r3, [pc, #200]	; (8001af4 <main+0x190>)
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	4b30      	ldr	r3, [pc, #192]	; (8001af0 <main+0x18c>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4413      	add	r3, r2
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff fc58 	bl	80012e8 <leg1_2>
			leg1_1(b + angel2);
 8001a38:	4b2e      	ldr	r3, [pc, #184]	; (8001af4 <main+0x190>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	4b2c      	ldr	r3, [pc, #176]	; (8001af0 <main+0x18c>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4413      	add	r3, r2
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff fc1c 	bl	8001280 <leg1_1>
			HAL_Delay(10);
 8001a48:	200a      	movs	r0, #10
 8001a4a:	f000 fd29 	bl	80024a0 <HAL_Delay>
			leg3_2(d - angel2);
 8001a4e:	4b2a      	ldr	r3, [pc, #168]	; (8001af8 <main+0x194>)
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	4b27      	ldr	r3, [pc, #156]	; (8001af0 <main+0x18c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff fd7d 	bl	8001558 <leg3_2>
			leg3_1(d - angel2);
 8001a5e:	4b26      	ldr	r3, [pc, #152]	; (8001af8 <main+0x194>)
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	4b23      	ldr	r3, [pc, #140]	; (8001af0 <main+0x18c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff fd41 	bl	80014f0 <leg3_1>
 8001a6e:	e79f      	b.n	80019b0 <main+0x4c>
		}


		else if (filtredData <= -800)
 8001a70:	4b1e      	ldr	r3, [pc, #120]	; (8001aec <main+0x188>)
 8001a72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a76:	f513 7f48 	cmn.w	r3, #800	; 0x320
 8001a7a:	dc99      	bgt.n	80019b0 <main+0x4c>
		{

			angel2 = (filtredData / 60);
 8001a7c:	4b1b      	ldr	r3, [pc, #108]	; (8001aec <main+0x188>)
 8001a7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a82:	4a19      	ldr	r2, [pc, #100]	; (8001ae8 <main+0x184>)
 8001a84:	fb82 1203 	smull	r1, r2, r2, r3
 8001a88:	441a      	add	r2, r3
 8001a8a:	1152      	asrs	r2, r2, #5
 8001a8c:	17db      	asrs	r3, r3, #31
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	b21b      	sxth	r3, r3
 8001a92:	461a      	mov	r2, r3
 8001a94:	4b16      	ldr	r3, [pc, #88]	; (8001af0 <main+0x18c>)
 8001a96:	601a      	str	r2, [r3, #0]
			leg2_2(b + angel2);
 8001a98:	4b16      	ldr	r3, [pc, #88]	; (8001af4 <main+0x190>)
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	4b14      	ldr	r3, [pc, #80]	; (8001af0 <main+0x18c>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff fcbc 	bl	8001420 <leg2_2>
			leg2_1(b + angel2);
 8001aa8:	4b12      	ldr	r3, [pc, #72]	; (8001af4 <main+0x190>)
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	4b10      	ldr	r3, [pc, #64]	; (8001af0 <main+0x18c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff fc80 	bl	80013b8 <leg2_1>
			HAL_Delay(10);
 8001ab8:	200a      	movs	r0, #10
 8001aba:	f000 fcf1 	bl	80024a0 <HAL_Delay>
			leg4_2(d - angel2);
 8001abe:	4b0e      	ldr	r3, [pc, #56]	; (8001af8 <main+0x194>)
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	4b0b      	ldr	r3, [pc, #44]	; (8001af0 <main+0x18c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff fde1 	bl	8001690 <leg4_2>
			leg4_1(d - angel2);
 8001ace:	4b0a      	ldr	r3, [pc, #40]	; (8001af8 <main+0x194>)
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	4b07      	ldr	r3, [pc, #28]	; (8001af0 <main+0x18c>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff fda5 	bl	8001628 <leg4_1>
		for (int i = 0; i < 15; i++)
 8001ade:	e767      	b.n	80019b0 <main+0x4c>
 8001ae0:	200001c4 	.word	0x200001c4
 8001ae4:	2000009a 	.word	0x2000009a
 8001ae8:	88888889 	.word	0x88888889
 8001aec:	200001c6 	.word	0x200001c6
 8001af0:	200001c0 	.word	0x200001c0
 8001af4:	20000000 	.word	0x20000000
 8001af8:	20000004 	.word	0x20000004

08001afc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b094      	sub	sp, #80	; 0x50
 8001b00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b02:	f107 0320 	add.w	r3, r7, #32
 8001b06:	2230      	movs	r2, #48	; 0x30
 8001b08:	2100      	movs	r1, #0
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f002 f892 	bl	8003c34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b10:	f107 030c 	add.w	r3, r7, #12
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	605a      	str	r2, [r3, #4]
 8001b1a:	609a      	str	r2, [r3, #8]
 8001b1c:	60da      	str	r2, [r3, #12]
 8001b1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b20:	2300      	movs	r3, #0
 8001b22:	60bb      	str	r3, [r7, #8]
 8001b24:	4b27      	ldr	r3, [pc, #156]	; (8001bc4 <SystemClock_Config+0xc8>)
 8001b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b28:	4a26      	ldr	r2, [pc, #152]	; (8001bc4 <SystemClock_Config+0xc8>)
 8001b2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b2e:	6413      	str	r3, [r2, #64]	; 0x40
 8001b30:	4b24      	ldr	r3, [pc, #144]	; (8001bc4 <SystemClock_Config+0xc8>)
 8001b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b38:	60bb      	str	r3, [r7, #8]
 8001b3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	607b      	str	r3, [r7, #4]
 8001b40:	4b21      	ldr	r3, [pc, #132]	; (8001bc8 <SystemClock_Config+0xcc>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a20      	ldr	r2, [pc, #128]	; (8001bc8 <SystemClock_Config+0xcc>)
 8001b46:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b4a:	6013      	str	r3, [r2, #0]
 8001b4c:	4b1e      	ldr	r3, [pc, #120]	; (8001bc8 <SystemClock_Config+0xcc>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b54:	607b      	str	r3, [r7, #4]
 8001b56:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b60:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b62:	2302      	movs	r3, #2
 8001b64:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b66:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b6c:	2304      	movs	r3, #4
 8001b6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8001b70:	2340      	movs	r3, #64	; 0x40
 8001b72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001b74:	2304      	movs	r3, #4
 8001b76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001b78:	2304      	movs	r3, #4
 8001b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b7c:	f107 0320 	add.w	r3, r7, #32
 8001b80:	4618      	mov	r0, r3
 8001b82:	f000 ff1b 	bl	80029bc <HAL_RCC_OscConfig>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001b8c:	f000 fa6a 	bl	8002064 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b90:	230f      	movs	r3, #15
 8001b92:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b94:	2302      	movs	r3, #2
 8001b96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001ba4:	f107 030c 	add.w	r3, r7, #12
 8001ba8:	2101      	movs	r1, #1
 8001baa:	4618      	mov	r0, r3
 8001bac:	f001 f97e 	bl	8002eac <HAL_RCC_ClockConfig>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001bb6:	f000 fa55 	bl	8002064 <Error_Handler>
  }
}
 8001bba:	bf00      	nop
 8001bbc:	3750      	adds	r7, #80	; 0x50
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	40007000 	.word	0x40007000

08001bcc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b092      	sub	sp, #72	; 0x48
 8001bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bd2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	605a      	str	r2, [r3, #4]
 8001be6:	609a      	str	r2, [r3, #8]
 8001be8:	60da      	str	r2, [r3, #12]
 8001bea:	611a      	str	r2, [r3, #16]
 8001bec:	615a      	str	r2, [r3, #20]
 8001bee:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001bf0:	1d3b      	adds	r3, r7, #4
 8001bf2:	2220      	movs	r2, #32
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f002 f81c 	bl	8003c34 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001bfc:	4b45      	ldr	r3, [pc, #276]	; (8001d14 <MX_TIM1_Init+0x148>)
 8001bfe:	4a46      	ldr	r2, [pc, #280]	; (8001d18 <MX_TIM1_Init+0x14c>)
 8001c00:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 355;
 8001c02:	4b44      	ldr	r3, [pc, #272]	; (8001d14 <MX_TIM1_Init+0x148>)
 8001c04:	f240 1263 	movw	r2, #355	; 0x163
 8001c08:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c0a:	4b42      	ldr	r3, [pc, #264]	; (8001d14 <MX_TIM1_Init+0x148>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1799;
 8001c10:	4b40      	ldr	r3, [pc, #256]	; (8001d14 <MX_TIM1_Init+0x148>)
 8001c12:	f240 7207 	movw	r2, #1799	; 0x707
 8001c16:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c18:	4b3e      	ldr	r3, [pc, #248]	; (8001d14 <MX_TIM1_Init+0x148>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c1e:	4b3d      	ldr	r3, [pc, #244]	; (8001d14 <MX_TIM1_Init+0x148>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c24:	4b3b      	ldr	r3, [pc, #236]	; (8001d14 <MX_TIM1_Init+0x148>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c2a:	483a      	ldr	r0, [pc, #232]	; (8001d14 <MX_TIM1_Init+0x148>)
 8001c2c:	f001 fb2a 	bl	8003284 <HAL_TIM_PWM_Init>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001c36:	f000 fa15 	bl	8002064 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c42:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c46:	4619      	mov	r1, r3
 8001c48:	4832      	ldr	r0, [pc, #200]	; (8001d14 <MX_TIM1_Init+0x148>)
 8001c4a:	f001 ff0f 	bl	8003a6c <HAL_TIMEx_MasterConfigSynchronization>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8001c54:	f000 fa06 	bl	8002064 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c58:	2360      	movs	r3, #96	; 0x60
 8001c5a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c60:	2300      	movs	r3, #0
 8001c62:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c64:	2300      	movs	r3, #0
 8001c66:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c70:	2300      	movs	r3, #0
 8001c72:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c78:	2200      	movs	r2, #0
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4825      	ldr	r0, [pc, #148]	; (8001d14 <MX_TIM1_Init+0x148>)
 8001c7e:	f001 fc01 	bl	8003484 <HAL_TIM_PWM_ConfigChannel>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8001c88:	f000 f9ec 	bl	8002064 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c90:	2204      	movs	r2, #4
 8001c92:	4619      	mov	r1, r3
 8001c94:	481f      	ldr	r0, [pc, #124]	; (8001d14 <MX_TIM1_Init+0x148>)
 8001c96:	f001 fbf5 	bl	8003484 <HAL_TIM_PWM_ConfigChannel>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8001ca0:	f000 f9e0 	bl	8002064 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ca4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ca8:	2208      	movs	r2, #8
 8001caa:	4619      	mov	r1, r3
 8001cac:	4819      	ldr	r0, [pc, #100]	; (8001d14 <MX_TIM1_Init+0x148>)
 8001cae:	f001 fbe9 	bl	8003484 <HAL_TIM_PWM_ConfigChannel>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8001cb8:	f000 f9d4 	bl	8002064 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001cbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cc0:	220c      	movs	r2, #12
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4813      	ldr	r0, [pc, #76]	; (8001d14 <MX_TIM1_Init+0x148>)
 8001cc6:	f001 fbdd 	bl	8003484 <HAL_TIM_PWM_ConfigChannel>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001cd0:	f000 f9c8 	bl	8002064 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ce8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001cf2:	1d3b      	adds	r3, r7, #4
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4807      	ldr	r0, [pc, #28]	; (8001d14 <MX_TIM1_Init+0x148>)
 8001cf8:	f001 ff26 	bl	8003b48 <HAL_TIMEx_ConfigBreakDeadTime>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8001d02:	f000 f9af 	bl	8002064 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001d06:	4803      	ldr	r0, [pc, #12]	; (8001d14 <MX_TIM1_Init+0x148>)
 8001d08:	f000 fa3e 	bl	8002188 <HAL_TIM_MspPostInit>

}
 8001d0c:	bf00      	nop
 8001d0e:	3748      	adds	r7, #72	; 0x48
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	200000a0 	.word	0x200000a0
 8001d18:	40010000 	.word	0x40010000

08001d1c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b08a      	sub	sp, #40	; 0x28
 8001d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d22:	f107 0320 	add.w	r3, r7, #32
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d2c:	1d3b      	adds	r3, r7, #4
 8001d2e:	2200      	movs	r2, #0
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	605a      	str	r2, [r3, #4]
 8001d34:	609a      	str	r2, [r3, #8]
 8001d36:	60da      	str	r2, [r3, #12]
 8001d38:	611a      	str	r2, [r3, #16]
 8001d3a:	615a      	str	r2, [r3, #20]
 8001d3c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d3e:	4b28      	ldr	r3, [pc, #160]	; (8001de0 <MX_TIM3_Init+0xc4>)
 8001d40:	4a28      	ldr	r2, [pc, #160]	; (8001de4 <MX_TIM3_Init+0xc8>)
 8001d42:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 355;
 8001d44:	4b26      	ldr	r3, [pc, #152]	; (8001de0 <MX_TIM3_Init+0xc4>)
 8001d46:	f240 1263 	movw	r2, #355	; 0x163
 8001d4a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d4c:	4b24      	ldr	r3, [pc, #144]	; (8001de0 <MX_TIM3_Init+0xc4>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1799;
 8001d52:	4b23      	ldr	r3, [pc, #140]	; (8001de0 <MX_TIM3_Init+0xc4>)
 8001d54:	f240 7207 	movw	r2, #1799	; 0x707
 8001d58:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d5a:	4b21      	ldr	r3, [pc, #132]	; (8001de0 <MX_TIM3_Init+0xc4>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d60:	4b1f      	ldr	r3, [pc, #124]	; (8001de0 <MX_TIM3_Init+0xc4>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001d66:	481e      	ldr	r0, [pc, #120]	; (8001de0 <MX_TIM3_Init+0xc4>)
 8001d68:	f001 fa8c 	bl	8003284 <HAL_TIM_PWM_Init>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001d72:	f000 f977 	bl	8002064 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d76:	2300      	movs	r3, #0
 8001d78:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d7e:	f107 0320 	add.w	r3, r7, #32
 8001d82:	4619      	mov	r1, r3
 8001d84:	4816      	ldr	r0, [pc, #88]	; (8001de0 <MX_TIM3_Init+0xc4>)
 8001d86:	f001 fe71 	bl	8003a6c <HAL_TIMEx_MasterConfigSynchronization>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001d90:	f000 f968 	bl	8002064 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d94:	2360      	movs	r3, #96	; 0x60
 8001d96:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001da0:	2300      	movs	r3, #0
 8001da2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001da4:	1d3b      	adds	r3, r7, #4
 8001da6:	2208      	movs	r2, #8
 8001da8:	4619      	mov	r1, r3
 8001daa:	480d      	ldr	r0, [pc, #52]	; (8001de0 <MX_TIM3_Init+0xc4>)
 8001dac:	f001 fb6a 	bl	8003484 <HAL_TIM_PWM_ConfigChannel>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001db6:	f000 f955 	bl	8002064 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001dba:	1d3b      	adds	r3, r7, #4
 8001dbc:	220c      	movs	r2, #12
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4807      	ldr	r0, [pc, #28]	; (8001de0 <MX_TIM3_Init+0xc4>)
 8001dc2:	f001 fb5f 	bl	8003484 <HAL_TIM_PWM_ConfigChannel>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001dcc:	f000 f94a 	bl	8002064 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001dd0:	4803      	ldr	r0, [pc, #12]	; (8001de0 <MX_TIM3_Init+0xc4>)
 8001dd2:	f000 f9d9 	bl	8002188 <HAL_TIM_MspPostInit>

}
 8001dd6:	bf00      	nop
 8001dd8:	3728      	adds	r7, #40	; 0x28
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	200000e8 	.word	0x200000e8
 8001de4:	40000400 	.word	0x40000400

08001de8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b08a      	sub	sp, #40	; 0x28
 8001dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dee:	f107 0320 	add.w	r3, r7, #32
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001df8:	1d3b      	adds	r3, r7, #4
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	605a      	str	r2, [r3, #4]
 8001e00:	609a      	str	r2, [r3, #8]
 8001e02:	60da      	str	r2, [r3, #12]
 8001e04:	611a      	str	r2, [r3, #16]
 8001e06:	615a      	str	r2, [r3, #20]
 8001e08:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e0a:	4b2d      	ldr	r3, [pc, #180]	; (8001ec0 <MX_TIM4_Init+0xd8>)
 8001e0c:	4a2d      	ldr	r2, [pc, #180]	; (8001ec4 <MX_TIM4_Init+0xdc>)
 8001e0e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 355;
 8001e10:	4b2b      	ldr	r3, [pc, #172]	; (8001ec0 <MX_TIM4_Init+0xd8>)
 8001e12:	f240 1263 	movw	r2, #355	; 0x163
 8001e16:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e18:	4b29      	ldr	r3, [pc, #164]	; (8001ec0 <MX_TIM4_Init+0xd8>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1799;
 8001e1e:	4b28      	ldr	r3, [pc, #160]	; (8001ec0 <MX_TIM4_Init+0xd8>)
 8001e20:	f240 7207 	movw	r2, #1799	; 0x707
 8001e24:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e26:	4b26      	ldr	r3, [pc, #152]	; (8001ec0 <MX_TIM4_Init+0xd8>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e2c:	4b24      	ldr	r3, [pc, #144]	; (8001ec0 <MX_TIM4_Init+0xd8>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001e32:	4823      	ldr	r0, [pc, #140]	; (8001ec0 <MX_TIM4_Init+0xd8>)
 8001e34:	f001 fa26 	bl	8003284 <HAL_TIM_PWM_Init>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001e3e:	f000 f911 	bl	8002064 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e42:	2300      	movs	r3, #0
 8001e44:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e46:	2300      	movs	r3, #0
 8001e48:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e4a:	f107 0320 	add.w	r3, r7, #32
 8001e4e:	4619      	mov	r1, r3
 8001e50:	481b      	ldr	r0, [pc, #108]	; (8001ec0 <MX_TIM4_Init+0xd8>)
 8001e52:	f001 fe0b 	bl	8003a6c <HAL_TIMEx_MasterConfigSynchronization>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001e5c:	f000 f902 	bl	8002064 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e60:	2360      	movs	r3, #96	; 0x60
 8001e62:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e64:	2300      	movs	r3, #0
 8001e66:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e70:	1d3b      	adds	r3, r7, #4
 8001e72:	2200      	movs	r2, #0
 8001e74:	4619      	mov	r1, r3
 8001e76:	4812      	ldr	r0, [pc, #72]	; (8001ec0 <MX_TIM4_Init+0xd8>)
 8001e78:	f001 fb04 	bl	8003484 <HAL_TIM_PWM_ConfigChannel>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001e82:	f000 f8ef 	bl	8002064 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e86:	1d3b      	adds	r3, r7, #4
 8001e88:	2204      	movs	r2, #4
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	480c      	ldr	r0, [pc, #48]	; (8001ec0 <MX_TIM4_Init+0xd8>)
 8001e8e:	f001 faf9 	bl	8003484 <HAL_TIM_PWM_ConfigChannel>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8001e98:	f000 f8e4 	bl	8002064 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e9c:	1d3b      	adds	r3, r7, #4
 8001e9e:	220c      	movs	r2, #12
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4807      	ldr	r0, [pc, #28]	; (8001ec0 <MX_TIM4_Init+0xd8>)
 8001ea4:	f001 faee 	bl	8003484 <HAL_TIM_PWM_ConfigChannel>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8001eae:	f000 f8d9 	bl	8002064 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001eb2:	4803      	ldr	r0, [pc, #12]	; (8001ec0 <MX_TIM4_Init+0xd8>)
 8001eb4:	f000 f968 	bl	8002188 <HAL_TIM_MspPostInit>

}
 8001eb8:	bf00      	nop
 8001eba:	3728      	adds	r7, #40	; 0x28
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	20000130 	.word	0x20000130
 8001ec4:	40000800 	.word	0x40000800

08001ec8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b08a      	sub	sp, #40	; 0x28
 8001ecc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ece:	f107 0320 	add.w	r3, r7, #32
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ed8:	1d3b      	adds	r3, r7, #4
 8001eda:	2200      	movs	r2, #0
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	605a      	str	r2, [r3, #4]
 8001ee0:	609a      	str	r2, [r3, #8]
 8001ee2:	60da      	str	r2, [r3, #12]
 8001ee4:	611a      	str	r2, [r3, #16]
 8001ee6:	615a      	str	r2, [r3, #20]
 8001ee8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001eea:	4b2d      	ldr	r3, [pc, #180]	; (8001fa0 <MX_TIM5_Init+0xd8>)
 8001eec:	4a2d      	ldr	r2, [pc, #180]	; (8001fa4 <MX_TIM5_Init+0xdc>)
 8001eee:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 355;
 8001ef0:	4b2b      	ldr	r3, [pc, #172]	; (8001fa0 <MX_TIM5_Init+0xd8>)
 8001ef2:	f240 1263 	movw	r2, #355	; 0x163
 8001ef6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ef8:	4b29      	ldr	r3, [pc, #164]	; (8001fa0 <MX_TIM5_Init+0xd8>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1799;
 8001efe:	4b28      	ldr	r3, [pc, #160]	; (8001fa0 <MX_TIM5_Init+0xd8>)
 8001f00:	f240 7207 	movw	r2, #1799	; 0x707
 8001f04:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f06:	4b26      	ldr	r3, [pc, #152]	; (8001fa0 <MX_TIM5_Init+0xd8>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f0c:	4b24      	ldr	r3, [pc, #144]	; (8001fa0 <MX_TIM5_Init+0xd8>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001f12:	4823      	ldr	r0, [pc, #140]	; (8001fa0 <MX_TIM5_Init+0xd8>)
 8001f14:	f001 f9b6 	bl	8003284 <HAL_TIM_PWM_Init>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8001f1e:	f000 f8a1 	bl	8002064 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f22:	2300      	movs	r3, #0
 8001f24:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f26:	2300      	movs	r3, #0
 8001f28:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001f2a:	f107 0320 	add.w	r3, r7, #32
 8001f2e:	4619      	mov	r1, r3
 8001f30:	481b      	ldr	r0, [pc, #108]	; (8001fa0 <MX_TIM5_Init+0xd8>)
 8001f32:	f001 fd9b 	bl	8003a6c <HAL_TIMEx_MasterConfigSynchronization>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8001f3c:	f000 f892 	bl	8002064 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f40:	2360      	movs	r3, #96	; 0x60
 8001f42:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f44:	2300      	movs	r3, #0
 8001f46:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f50:	1d3b      	adds	r3, r7, #4
 8001f52:	2200      	movs	r2, #0
 8001f54:	4619      	mov	r1, r3
 8001f56:	4812      	ldr	r0, [pc, #72]	; (8001fa0 <MX_TIM5_Init+0xd8>)
 8001f58:	f001 fa94 	bl	8003484 <HAL_TIM_PWM_ConfigChannel>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8001f62:	f000 f87f 	bl	8002064 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f66:	1d3b      	adds	r3, r7, #4
 8001f68:	2204      	movs	r2, #4
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	480c      	ldr	r0, [pc, #48]	; (8001fa0 <MX_TIM5_Init+0xd8>)
 8001f6e:	f001 fa89 	bl	8003484 <HAL_TIM_PWM_ConfigChannel>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <MX_TIM5_Init+0xb4>
  {
    Error_Handler();
 8001f78:	f000 f874 	bl	8002064 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f7c:	1d3b      	adds	r3, r7, #4
 8001f7e:	2208      	movs	r2, #8
 8001f80:	4619      	mov	r1, r3
 8001f82:	4807      	ldr	r0, [pc, #28]	; (8001fa0 <MX_TIM5_Init+0xd8>)
 8001f84:	f001 fa7e 	bl	8003484 <HAL_TIM_PWM_ConfigChannel>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <MX_TIM5_Init+0xca>
  {
    Error_Handler();
 8001f8e:	f000 f869 	bl	8002064 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001f92:	4803      	ldr	r0, [pc, #12]	; (8001fa0 <MX_TIM5_Init+0xd8>)
 8001f94:	f000 f8f8 	bl	8002188 <HAL_TIM_MspPostInit>

}
 8001f98:	bf00      	nop
 8001f9a:	3728      	adds	r7, #40	; 0x28
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	20000178 	.word	0x20000178
 8001fa4:	40000c00 	.word	0x40000c00

08001fa8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b087      	sub	sp, #28
 8001fac:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fae:	2300      	movs	r3, #0
 8001fb0:	617b      	str	r3, [r7, #20]
 8001fb2:	4b25      	ldr	r3, [pc, #148]	; (8002048 <MX_GPIO_Init+0xa0>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb6:	4a24      	ldr	r2, [pc, #144]	; (8002048 <MX_GPIO_Init+0xa0>)
 8001fb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fbe:	4b22      	ldr	r3, [pc, #136]	; (8002048 <MX_GPIO_Init+0xa0>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fc6:	617b      	str	r3, [r7, #20]
 8001fc8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fca:	2300      	movs	r3, #0
 8001fcc:	613b      	str	r3, [r7, #16]
 8001fce:	4b1e      	ldr	r3, [pc, #120]	; (8002048 <MX_GPIO_Init+0xa0>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	4a1d      	ldr	r2, [pc, #116]	; (8002048 <MX_GPIO_Init+0xa0>)
 8001fd4:	f043 0301 	orr.w	r3, r3, #1
 8001fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fda:	4b1b      	ldr	r3, [pc, #108]	; (8002048 <MX_GPIO_Init+0xa0>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	613b      	str	r3, [r7, #16]
 8001fe4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60fb      	str	r3, [r7, #12]
 8001fea:	4b17      	ldr	r3, [pc, #92]	; (8002048 <MX_GPIO_Init+0xa0>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fee:	4a16      	ldr	r2, [pc, #88]	; (8002048 <MX_GPIO_Init+0xa0>)
 8001ff0:	f043 0302 	orr.w	r3, r3, #2
 8001ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff6:	4b14      	ldr	r3, [pc, #80]	; (8002048 <MX_GPIO_Init+0xa0>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	60bb      	str	r3, [r7, #8]
 8002006:	4b10      	ldr	r3, [pc, #64]	; (8002048 <MX_GPIO_Init+0xa0>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200a:	4a0f      	ldr	r2, [pc, #60]	; (8002048 <MX_GPIO_Init+0xa0>)
 800200c:	f043 0310 	orr.w	r3, r3, #16
 8002010:	6313      	str	r3, [r2, #48]	; 0x30
 8002012:	4b0d      	ldr	r3, [pc, #52]	; (8002048 <MX_GPIO_Init+0xa0>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	f003 0310 	and.w	r3, r3, #16
 800201a:	60bb      	str	r3, [r7, #8]
 800201c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	607b      	str	r3, [r7, #4]
 8002022:	4b09      	ldr	r3, [pc, #36]	; (8002048 <MX_GPIO_Init+0xa0>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	4a08      	ldr	r2, [pc, #32]	; (8002048 <MX_GPIO_Init+0xa0>)
 8002028:	f043 0308 	orr.w	r3, r3, #8
 800202c:	6313      	str	r3, [r2, #48]	; 0x30
 800202e:	4b06      	ldr	r3, [pc, #24]	; (8002048 <MX_GPIO_Init+0xa0>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	f003 0308 	and.w	r3, r3, #8
 8002036:	607b      	str	r3, [r7, #4]
 8002038:	687b      	ldr	r3, [r7, #4]

}
 800203a:	bf00      	nop
 800203c:	371c      	adds	r7, #28
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	40023800 	.word	0x40023800

0800204c <InitializeGyro>:

/* USER CODE BEGIN 4 */
void InitializeGyro()
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
	GyroInit();
 8002050:	f7fe ffbc 	bl	8000fcc <GyroInit>
}
 8002054:	bf00      	nop
 8002056:	bd80      	pop	{r7, pc}

08002058 <InitializeAccel>:

void InitializeAccel()
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
	AccelerometerInit();
 800205c:	f7fe fe56 	bl	8000d0c <AccelerometerInit>
}
 8002060:	bf00      	nop
 8002062:	bd80      	pop	{r7, pc}

08002064 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002068:	b672      	cpsid	i
}
 800206a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800206c:	e7fe      	b.n	800206c <Error_Handler+0x8>
	...

08002070 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	607b      	str	r3, [r7, #4]
 800207a:	4b10      	ldr	r3, [pc, #64]	; (80020bc <HAL_MspInit+0x4c>)
 800207c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207e:	4a0f      	ldr	r2, [pc, #60]	; (80020bc <HAL_MspInit+0x4c>)
 8002080:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002084:	6453      	str	r3, [r2, #68]	; 0x44
 8002086:	4b0d      	ldr	r3, [pc, #52]	; (80020bc <HAL_MspInit+0x4c>)
 8002088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800208e:	607b      	str	r3, [r7, #4]
 8002090:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	603b      	str	r3, [r7, #0]
 8002096:	4b09      	ldr	r3, [pc, #36]	; (80020bc <HAL_MspInit+0x4c>)
 8002098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209a:	4a08      	ldr	r2, [pc, #32]	; (80020bc <HAL_MspInit+0x4c>)
 800209c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020a0:	6413      	str	r3, [r2, #64]	; 0x40
 80020a2:	4b06      	ldr	r3, [pc, #24]	; (80020bc <HAL_MspInit+0x4c>)
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020aa:	603b      	str	r3, [r7, #0]
 80020ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020ae:	bf00      	nop
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	40023800 	.word	0x40023800

080020c0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b087      	sub	sp, #28
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a29      	ldr	r2, [pc, #164]	; (8002174 <HAL_TIM_PWM_MspInit+0xb4>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d10e      	bne.n	80020f0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020d2:	2300      	movs	r3, #0
 80020d4:	617b      	str	r3, [r7, #20]
 80020d6:	4b28      	ldr	r3, [pc, #160]	; (8002178 <HAL_TIM_PWM_MspInit+0xb8>)
 80020d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020da:	4a27      	ldr	r2, [pc, #156]	; (8002178 <HAL_TIM_PWM_MspInit+0xb8>)
 80020dc:	f043 0301 	orr.w	r3, r3, #1
 80020e0:	6453      	str	r3, [r2, #68]	; 0x44
 80020e2:	4b25      	ldr	r3, [pc, #148]	; (8002178 <HAL_TIM_PWM_MspInit+0xb8>)
 80020e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	617b      	str	r3, [r7, #20]
 80020ec:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80020ee:	e03a      	b.n	8002166 <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM3)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a21      	ldr	r2, [pc, #132]	; (800217c <HAL_TIM_PWM_MspInit+0xbc>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d10e      	bne.n	8002118 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020fa:	2300      	movs	r3, #0
 80020fc:	613b      	str	r3, [r7, #16]
 80020fe:	4b1e      	ldr	r3, [pc, #120]	; (8002178 <HAL_TIM_PWM_MspInit+0xb8>)
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	4a1d      	ldr	r2, [pc, #116]	; (8002178 <HAL_TIM_PWM_MspInit+0xb8>)
 8002104:	f043 0302 	orr.w	r3, r3, #2
 8002108:	6413      	str	r3, [r2, #64]	; 0x40
 800210a:	4b1b      	ldr	r3, [pc, #108]	; (8002178 <HAL_TIM_PWM_MspInit+0xb8>)
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	613b      	str	r3, [r7, #16]
 8002114:	693b      	ldr	r3, [r7, #16]
}
 8002116:	e026      	b.n	8002166 <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM4)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a18      	ldr	r2, [pc, #96]	; (8002180 <HAL_TIM_PWM_MspInit+0xc0>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d10e      	bne.n	8002140 <HAL_TIM_PWM_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	4b14      	ldr	r3, [pc, #80]	; (8002178 <HAL_TIM_PWM_MspInit+0xb8>)
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	4a13      	ldr	r2, [pc, #76]	; (8002178 <HAL_TIM_PWM_MspInit+0xb8>)
 800212c:	f043 0304 	orr.w	r3, r3, #4
 8002130:	6413      	str	r3, [r2, #64]	; 0x40
 8002132:	4b11      	ldr	r3, [pc, #68]	; (8002178 <HAL_TIM_PWM_MspInit+0xb8>)
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	f003 0304 	and.w	r3, r3, #4
 800213a:	60fb      	str	r3, [r7, #12]
 800213c:	68fb      	ldr	r3, [r7, #12]
}
 800213e:	e012      	b.n	8002166 <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM5)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a0f      	ldr	r2, [pc, #60]	; (8002184 <HAL_TIM_PWM_MspInit+0xc4>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d10d      	bne.n	8002166 <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800214a:	2300      	movs	r3, #0
 800214c:	60bb      	str	r3, [r7, #8]
 800214e:	4b0a      	ldr	r3, [pc, #40]	; (8002178 <HAL_TIM_PWM_MspInit+0xb8>)
 8002150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002152:	4a09      	ldr	r2, [pc, #36]	; (8002178 <HAL_TIM_PWM_MspInit+0xb8>)
 8002154:	f043 0308 	orr.w	r3, r3, #8
 8002158:	6413      	str	r3, [r2, #64]	; 0x40
 800215a:	4b07      	ldr	r3, [pc, #28]	; (8002178 <HAL_TIM_PWM_MspInit+0xb8>)
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	f003 0308 	and.w	r3, r3, #8
 8002162:	60bb      	str	r3, [r7, #8]
 8002164:	68bb      	ldr	r3, [r7, #8]
}
 8002166:	bf00      	nop
 8002168:	371c      	adds	r7, #28
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	40010000 	.word	0x40010000
 8002178:	40023800 	.word	0x40023800
 800217c:	40000400 	.word	0x40000400
 8002180:	40000800 	.word	0x40000800
 8002184:	40000c00 	.word	0x40000c00

08002188 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b08c      	sub	sp, #48	; 0x30
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002190:	f107 031c 	add.w	r3, r7, #28
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	605a      	str	r2, [r3, #4]
 800219a:	609a      	str	r2, [r3, #8]
 800219c:	60da      	str	r2, [r3, #12]
 800219e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a49      	ldr	r2, [pc, #292]	; (80022cc <HAL_TIM_MspPostInit+0x144>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d11f      	bne.n	80021ea <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80021aa:	2300      	movs	r3, #0
 80021ac:	61bb      	str	r3, [r7, #24]
 80021ae:	4b48      	ldr	r3, [pc, #288]	; (80022d0 <HAL_TIM_MspPostInit+0x148>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	4a47      	ldr	r2, [pc, #284]	; (80022d0 <HAL_TIM_MspPostInit+0x148>)
 80021b4:	f043 0310 	orr.w	r3, r3, #16
 80021b8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ba:	4b45      	ldr	r3, [pc, #276]	; (80022d0 <HAL_TIM_MspPostInit+0x148>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	f003 0310 	and.w	r3, r3, #16
 80021c2:	61bb      	str	r3, [r7, #24]
 80021c4:	69bb      	ldr	r3, [r7, #24]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 80021c6:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 80021ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021cc:	2302      	movs	r3, #2
 80021ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d0:	2300      	movs	r3, #0
 80021d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d4:	2300      	movs	r3, #0
 80021d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80021d8:	2301      	movs	r3, #1
 80021da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021dc:	f107 031c 	add.w	r3, r7, #28
 80021e0:	4619      	mov	r1, r3
 80021e2:	483c      	ldr	r0, [pc, #240]	; (80022d4 <HAL_TIM_MspPostInit+0x14c>)
 80021e4:	f000 fa66 	bl	80026b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80021e8:	e06b      	b.n	80022c2 <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM3)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a3a      	ldr	r2, [pc, #232]	; (80022d8 <HAL_TIM_MspPostInit+0x150>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d11e      	bne.n	8002232 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021f4:	2300      	movs	r3, #0
 80021f6:	617b      	str	r3, [r7, #20]
 80021f8:	4b35      	ldr	r3, [pc, #212]	; (80022d0 <HAL_TIM_MspPostInit+0x148>)
 80021fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fc:	4a34      	ldr	r2, [pc, #208]	; (80022d0 <HAL_TIM_MspPostInit+0x148>)
 80021fe:	f043 0302 	orr.w	r3, r3, #2
 8002202:	6313      	str	r3, [r2, #48]	; 0x30
 8002204:	4b32      	ldr	r3, [pc, #200]	; (80022d0 <HAL_TIM_MspPostInit+0x148>)
 8002206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	617b      	str	r3, [r7, #20]
 800220e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002210:	2303      	movs	r3, #3
 8002212:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002214:	2302      	movs	r3, #2
 8002216:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002218:	2300      	movs	r3, #0
 800221a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221c:	2300      	movs	r3, #0
 800221e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002220:	2302      	movs	r3, #2
 8002222:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002224:	f107 031c 	add.w	r3, r7, #28
 8002228:	4619      	mov	r1, r3
 800222a:	482c      	ldr	r0, [pc, #176]	; (80022dc <HAL_TIM_MspPostInit+0x154>)
 800222c:	f000 fa42 	bl	80026b4 <HAL_GPIO_Init>
}
 8002230:	e047      	b.n	80022c2 <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM4)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a2a      	ldr	r2, [pc, #168]	; (80022e0 <HAL_TIM_MspPostInit+0x158>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d11f      	bne.n	800227c <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800223c:	2300      	movs	r3, #0
 800223e:	613b      	str	r3, [r7, #16]
 8002240:	4b23      	ldr	r3, [pc, #140]	; (80022d0 <HAL_TIM_MspPostInit+0x148>)
 8002242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002244:	4a22      	ldr	r2, [pc, #136]	; (80022d0 <HAL_TIM_MspPostInit+0x148>)
 8002246:	f043 0308 	orr.w	r3, r3, #8
 800224a:	6313      	str	r3, [r2, #48]	; 0x30
 800224c:	4b20      	ldr	r3, [pc, #128]	; (80022d0 <HAL_TIM_MspPostInit+0x148>)
 800224e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002250:	f003 0308 	and.w	r3, r3, #8
 8002254:	613b      	str	r3, [r7, #16]
 8002256:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8002258:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800225c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225e:	2302      	movs	r3, #2
 8002260:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002262:	2300      	movs	r3, #0
 8002264:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002266:	2300      	movs	r3, #0
 8002268:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800226a:	2302      	movs	r3, #2
 800226c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800226e:	f107 031c 	add.w	r3, r7, #28
 8002272:	4619      	mov	r1, r3
 8002274:	481b      	ldr	r0, [pc, #108]	; (80022e4 <HAL_TIM_MspPostInit+0x15c>)
 8002276:	f000 fa1d 	bl	80026b4 <HAL_GPIO_Init>
}
 800227a:	e022      	b.n	80022c2 <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM5)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a19      	ldr	r2, [pc, #100]	; (80022e8 <HAL_TIM_MspPostInit+0x160>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d11d      	bne.n	80022c2 <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002286:	2300      	movs	r3, #0
 8002288:	60fb      	str	r3, [r7, #12]
 800228a:	4b11      	ldr	r3, [pc, #68]	; (80022d0 <HAL_TIM_MspPostInit+0x148>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	4a10      	ldr	r2, [pc, #64]	; (80022d0 <HAL_TIM_MspPostInit+0x148>)
 8002290:	f043 0301 	orr.w	r3, r3, #1
 8002294:	6313      	str	r3, [r2, #48]	; 0x30
 8002296:	4b0e      	ldr	r3, [pc, #56]	; (80022d0 <HAL_TIM_MspPostInit+0x148>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	60fb      	str	r3, [r7, #12]
 80022a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80022a2:	2307      	movs	r3, #7
 80022a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a6:	2302      	movs	r3, #2
 80022a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022aa:	2300      	movs	r3, #0
 80022ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ae:	2300      	movs	r3, #0
 80022b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80022b2:	2302      	movs	r3, #2
 80022b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b6:	f107 031c 	add.w	r3, r7, #28
 80022ba:	4619      	mov	r1, r3
 80022bc:	480b      	ldr	r0, [pc, #44]	; (80022ec <HAL_TIM_MspPostInit+0x164>)
 80022be:	f000 f9f9 	bl	80026b4 <HAL_GPIO_Init>
}
 80022c2:	bf00      	nop
 80022c4:	3730      	adds	r7, #48	; 0x30
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	40010000 	.word	0x40010000
 80022d0:	40023800 	.word	0x40023800
 80022d4:	40021000 	.word	0x40021000
 80022d8:	40000400 	.word	0x40000400
 80022dc:	40020400 	.word	0x40020400
 80022e0:	40000800 	.word	0x40000800
 80022e4:	40020c00 	.word	0x40020c00
 80022e8:	40000c00 	.word	0x40000c00
 80022ec:	40020000 	.word	0x40020000

080022f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022f4:	e7fe      	b.n	80022f4 <NMI_Handler+0x4>

080022f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022f6:	b480      	push	{r7}
 80022f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022fa:	e7fe      	b.n	80022fa <HardFault_Handler+0x4>

080022fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002300:	e7fe      	b.n	8002300 <MemManage_Handler+0x4>

08002302 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002302:	b480      	push	{r7}
 8002304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002306:	e7fe      	b.n	8002306 <BusFault_Handler+0x4>

08002308 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800230c:	e7fe      	b.n	800230c <UsageFault_Handler+0x4>

0800230e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800230e:	b480      	push	{r7}
 8002310:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002312:	bf00      	nop
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002320:	bf00      	nop
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr

0800232a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800232a:	b480      	push	{r7}
 800232c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800232e:	bf00      	nop
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800233c:	f000 f890 	bl	8002460 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002340:	bf00      	nop
 8002342:	bd80      	pop	{r7, pc}

08002344 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002348:	4b06      	ldr	r3, [pc, #24]	; (8002364 <SystemInit+0x20>)
 800234a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800234e:	4a05      	ldr	r2, [pc, #20]	; (8002364 <SystemInit+0x20>)
 8002350:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002354:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002358:	bf00      	nop
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	e000ed00 	.word	0xe000ed00

08002368 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002368:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800236c:	480d      	ldr	r0, [pc, #52]	; (80023a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800236e:	490e      	ldr	r1, [pc, #56]	; (80023a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002370:	4a0e      	ldr	r2, [pc, #56]	; (80023ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002372:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002374:	e002      	b.n	800237c <LoopCopyDataInit>

08002376 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002376:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002378:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800237a:	3304      	adds	r3, #4

0800237c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800237c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800237e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002380:	d3f9      	bcc.n	8002376 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002382:	4a0b      	ldr	r2, [pc, #44]	; (80023b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002384:	4c0b      	ldr	r4, [pc, #44]	; (80023b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002386:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002388:	e001      	b.n	800238e <LoopFillZerobss>

0800238a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800238a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800238c:	3204      	adds	r2, #4

0800238e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800238e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002390:	d3fb      	bcc.n	800238a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002392:	f7ff ffd7 	bl	8002344 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002396:	f001 fc29 	bl	8003bec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800239a:	f7ff fae3 	bl	8001964 <main>
  bx  lr    
 800239e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80023a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80023a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023a8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80023ac:	08003c7c 	.word	0x08003c7c
  ldr r2, =_sbss
 80023b0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80023b4:	200001cc 	.word	0x200001cc

080023b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023b8:	e7fe      	b.n	80023b8 <ADC_IRQHandler>
	...

080023bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023c0:	4b0e      	ldr	r3, [pc, #56]	; (80023fc <HAL_Init+0x40>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a0d      	ldr	r2, [pc, #52]	; (80023fc <HAL_Init+0x40>)
 80023c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023cc:	4b0b      	ldr	r3, [pc, #44]	; (80023fc <HAL_Init+0x40>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a0a      	ldr	r2, [pc, #40]	; (80023fc <HAL_Init+0x40>)
 80023d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023d8:	4b08      	ldr	r3, [pc, #32]	; (80023fc <HAL_Init+0x40>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a07      	ldr	r2, [pc, #28]	; (80023fc <HAL_Init+0x40>)
 80023de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023e4:	2003      	movs	r0, #3
 80023e6:	f000 f931 	bl	800264c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023ea:	200f      	movs	r0, #15
 80023ec:	f000 f808 	bl	8002400 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023f0:	f7ff fe3e 	bl	8002070 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	40023c00 	.word	0x40023c00

08002400 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002408:	4b12      	ldr	r3, [pc, #72]	; (8002454 <HAL_InitTick+0x54>)
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	4b12      	ldr	r3, [pc, #72]	; (8002458 <HAL_InitTick+0x58>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	4619      	mov	r1, r3
 8002412:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002416:	fbb3 f3f1 	udiv	r3, r3, r1
 800241a:	fbb2 f3f3 	udiv	r3, r2, r3
 800241e:	4618      	mov	r0, r3
 8002420:	f000 f93b 	bl	800269a <HAL_SYSTICK_Config>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e00e      	b.n	800244c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2b0f      	cmp	r3, #15
 8002432:	d80a      	bhi.n	800244a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002434:	2200      	movs	r2, #0
 8002436:	6879      	ldr	r1, [r7, #4]
 8002438:	f04f 30ff 	mov.w	r0, #4294967295
 800243c:	f000 f911 	bl	8002662 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002440:	4a06      	ldr	r2, [pc, #24]	; (800245c <HAL_InitTick+0x5c>)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002446:	2300      	movs	r3, #0
 8002448:	e000      	b.n	800244c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
}
 800244c:	4618      	mov	r0, r3
 800244e:	3708      	adds	r7, #8
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	2000006c 	.word	0x2000006c
 8002458:	20000074 	.word	0x20000074
 800245c:	20000070 	.word	0x20000070

08002460 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002464:	4b06      	ldr	r3, [pc, #24]	; (8002480 <HAL_IncTick+0x20>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	461a      	mov	r2, r3
 800246a:	4b06      	ldr	r3, [pc, #24]	; (8002484 <HAL_IncTick+0x24>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4413      	add	r3, r2
 8002470:	4a04      	ldr	r2, [pc, #16]	; (8002484 <HAL_IncTick+0x24>)
 8002472:	6013      	str	r3, [r2, #0]
}
 8002474:	bf00      	nop
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	20000074 	.word	0x20000074
 8002484:	200001c8 	.word	0x200001c8

08002488 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  return uwTick;
 800248c:	4b03      	ldr	r3, [pc, #12]	; (800249c <HAL_GetTick+0x14>)
 800248e:	681b      	ldr	r3, [r3, #0]
}
 8002490:	4618      	mov	r0, r3
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	200001c8 	.word	0x200001c8

080024a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024a8:	f7ff ffee 	bl	8002488 <HAL_GetTick>
 80024ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b8:	d005      	beq.n	80024c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024ba:	4b0a      	ldr	r3, [pc, #40]	; (80024e4 <HAL_Delay+0x44>)
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	461a      	mov	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	4413      	add	r3, r2
 80024c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024c6:	bf00      	nop
 80024c8:	f7ff ffde 	bl	8002488 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d8f7      	bhi.n	80024c8 <HAL_Delay+0x28>
  {
  }
}
 80024d8:	bf00      	nop
 80024da:	bf00      	nop
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	20000074 	.word	0x20000074

080024e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f003 0307 	and.w	r3, r3, #7
 80024f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024f8:	4b0c      	ldr	r3, [pc, #48]	; (800252c <__NVIC_SetPriorityGrouping+0x44>)
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024fe:	68ba      	ldr	r2, [r7, #8]
 8002500:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002504:	4013      	ands	r3, r2
 8002506:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002510:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002514:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002518:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800251a:	4a04      	ldr	r2, [pc, #16]	; (800252c <__NVIC_SetPriorityGrouping+0x44>)
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	60d3      	str	r3, [r2, #12]
}
 8002520:	bf00      	nop
 8002522:	3714      	adds	r7, #20
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	e000ed00 	.word	0xe000ed00

08002530 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002534:	4b04      	ldr	r3, [pc, #16]	; (8002548 <__NVIC_GetPriorityGrouping+0x18>)
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	0a1b      	lsrs	r3, r3, #8
 800253a:	f003 0307 	and.w	r3, r3, #7
}
 800253e:	4618      	mov	r0, r3
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr
 8002548:	e000ed00 	.word	0xe000ed00

0800254c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	4603      	mov	r3, r0
 8002554:	6039      	str	r1, [r7, #0]
 8002556:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255c:	2b00      	cmp	r3, #0
 800255e:	db0a      	blt.n	8002576 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	b2da      	uxtb	r2, r3
 8002564:	490c      	ldr	r1, [pc, #48]	; (8002598 <__NVIC_SetPriority+0x4c>)
 8002566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256a:	0112      	lsls	r2, r2, #4
 800256c:	b2d2      	uxtb	r2, r2
 800256e:	440b      	add	r3, r1
 8002570:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002574:	e00a      	b.n	800258c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	b2da      	uxtb	r2, r3
 800257a:	4908      	ldr	r1, [pc, #32]	; (800259c <__NVIC_SetPriority+0x50>)
 800257c:	79fb      	ldrb	r3, [r7, #7]
 800257e:	f003 030f 	and.w	r3, r3, #15
 8002582:	3b04      	subs	r3, #4
 8002584:	0112      	lsls	r2, r2, #4
 8002586:	b2d2      	uxtb	r2, r2
 8002588:	440b      	add	r3, r1
 800258a:	761a      	strb	r2, [r3, #24]
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	e000e100 	.word	0xe000e100
 800259c:	e000ed00 	.word	0xe000ed00

080025a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b089      	sub	sp, #36	; 0x24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f003 0307 	and.w	r3, r3, #7
 80025b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	f1c3 0307 	rsb	r3, r3, #7
 80025ba:	2b04      	cmp	r3, #4
 80025bc:	bf28      	it	cs
 80025be:	2304      	movcs	r3, #4
 80025c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	3304      	adds	r3, #4
 80025c6:	2b06      	cmp	r3, #6
 80025c8:	d902      	bls.n	80025d0 <NVIC_EncodePriority+0x30>
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	3b03      	subs	r3, #3
 80025ce:	e000      	b.n	80025d2 <NVIC_EncodePriority+0x32>
 80025d0:	2300      	movs	r3, #0
 80025d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025d4:	f04f 32ff 	mov.w	r2, #4294967295
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	fa02 f303 	lsl.w	r3, r2, r3
 80025de:	43da      	mvns	r2, r3
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	401a      	ands	r2, r3
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025e8:	f04f 31ff 	mov.w	r1, #4294967295
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	fa01 f303 	lsl.w	r3, r1, r3
 80025f2:	43d9      	mvns	r1, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025f8:	4313      	orrs	r3, r2
         );
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3724      	adds	r7, #36	; 0x24
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
	...

08002608 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	3b01      	subs	r3, #1
 8002614:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002618:	d301      	bcc.n	800261e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800261a:	2301      	movs	r3, #1
 800261c:	e00f      	b.n	800263e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800261e:	4a0a      	ldr	r2, [pc, #40]	; (8002648 <SysTick_Config+0x40>)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	3b01      	subs	r3, #1
 8002624:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002626:	210f      	movs	r1, #15
 8002628:	f04f 30ff 	mov.w	r0, #4294967295
 800262c:	f7ff ff8e 	bl	800254c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002630:	4b05      	ldr	r3, [pc, #20]	; (8002648 <SysTick_Config+0x40>)
 8002632:	2200      	movs	r2, #0
 8002634:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002636:	4b04      	ldr	r3, [pc, #16]	; (8002648 <SysTick_Config+0x40>)
 8002638:	2207      	movs	r2, #7
 800263a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	e000e010 	.word	0xe000e010

0800264c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f7ff ff47 	bl	80024e8 <__NVIC_SetPriorityGrouping>
}
 800265a:	bf00      	nop
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002662:	b580      	push	{r7, lr}
 8002664:	b086      	sub	sp, #24
 8002666:	af00      	add	r7, sp, #0
 8002668:	4603      	mov	r3, r0
 800266a:	60b9      	str	r1, [r7, #8]
 800266c:	607a      	str	r2, [r7, #4]
 800266e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002670:	2300      	movs	r3, #0
 8002672:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002674:	f7ff ff5c 	bl	8002530 <__NVIC_GetPriorityGrouping>
 8002678:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	68b9      	ldr	r1, [r7, #8]
 800267e:	6978      	ldr	r0, [r7, #20]
 8002680:	f7ff ff8e 	bl	80025a0 <NVIC_EncodePriority>
 8002684:	4602      	mov	r2, r0
 8002686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800268a:	4611      	mov	r1, r2
 800268c:	4618      	mov	r0, r3
 800268e:	f7ff ff5d 	bl	800254c <__NVIC_SetPriority>
}
 8002692:	bf00      	nop
 8002694:	3718      	adds	r7, #24
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b082      	sub	sp, #8
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f7ff ffb0 	bl	8002608 <SysTick_Config>
 80026a8:	4603      	mov	r3, r0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
	...

080026b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b089      	sub	sp, #36	; 0x24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026be:	2300      	movs	r3, #0
 80026c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026c2:	2300      	movs	r3, #0
 80026c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026c6:	2300      	movs	r3, #0
 80026c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026ca:	2300      	movs	r3, #0
 80026cc:	61fb      	str	r3, [r7, #28]
 80026ce:	e159      	b.n	8002984 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026d0:	2201      	movs	r2, #1
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	4013      	ands	r3, r2
 80026e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	f040 8148 	bne.w	800297e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d005      	beq.n	8002706 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002702:	2b02      	cmp	r3, #2
 8002704:	d130      	bne.n	8002768 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	2203      	movs	r2, #3
 8002712:	fa02 f303 	lsl.w	r3, r2, r3
 8002716:	43db      	mvns	r3, r3
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	4013      	ands	r3, r2
 800271c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	68da      	ldr	r2, [r3, #12]
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	4313      	orrs	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800273c:	2201      	movs	r2, #1
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	43db      	mvns	r3, r3
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	4013      	ands	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	091b      	lsrs	r3, r3, #4
 8002752:	f003 0201 	and.w	r2, r3, #1
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	4313      	orrs	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f003 0303 	and.w	r3, r3, #3
 8002770:	2b03      	cmp	r3, #3
 8002772:	d017      	beq.n	80027a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	2203      	movs	r2, #3
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	43db      	mvns	r3, r3
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	4013      	ands	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	689a      	ldr	r2, [r3, #8]
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	4313      	orrs	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f003 0303 	and.w	r3, r3, #3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d123      	bne.n	80027f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	08da      	lsrs	r2, r3, #3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	3208      	adds	r2, #8
 80027b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	f003 0307 	and.w	r3, r3, #7
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	220f      	movs	r2, #15
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	43db      	mvns	r3, r3
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	4013      	ands	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	691a      	ldr	r2, [r3, #16]
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	f003 0307 	and.w	r3, r3, #7
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	08da      	lsrs	r2, r3, #3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	3208      	adds	r2, #8
 80027f2:	69b9      	ldr	r1, [r7, #24]
 80027f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	2203      	movs	r2, #3
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	43db      	mvns	r3, r3
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	4013      	ands	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f003 0203 	and.w	r2, r3, #3
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	4313      	orrs	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002834:	2b00      	cmp	r3, #0
 8002836:	f000 80a2 	beq.w	800297e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800283a:	2300      	movs	r3, #0
 800283c:	60fb      	str	r3, [r7, #12]
 800283e:	4b57      	ldr	r3, [pc, #348]	; (800299c <HAL_GPIO_Init+0x2e8>)
 8002840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002842:	4a56      	ldr	r2, [pc, #344]	; (800299c <HAL_GPIO_Init+0x2e8>)
 8002844:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002848:	6453      	str	r3, [r2, #68]	; 0x44
 800284a:	4b54      	ldr	r3, [pc, #336]	; (800299c <HAL_GPIO_Init+0x2e8>)
 800284c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002852:	60fb      	str	r3, [r7, #12]
 8002854:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002856:	4a52      	ldr	r2, [pc, #328]	; (80029a0 <HAL_GPIO_Init+0x2ec>)
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	089b      	lsrs	r3, r3, #2
 800285c:	3302      	adds	r3, #2
 800285e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002862:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	f003 0303 	and.w	r3, r3, #3
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	220f      	movs	r2, #15
 800286e:	fa02 f303 	lsl.w	r3, r2, r3
 8002872:	43db      	mvns	r3, r3
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	4013      	ands	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a49      	ldr	r2, [pc, #292]	; (80029a4 <HAL_GPIO_Init+0x2f0>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d019      	beq.n	80028b6 <HAL_GPIO_Init+0x202>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a48      	ldr	r2, [pc, #288]	; (80029a8 <HAL_GPIO_Init+0x2f4>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d013      	beq.n	80028b2 <HAL_GPIO_Init+0x1fe>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a47      	ldr	r2, [pc, #284]	; (80029ac <HAL_GPIO_Init+0x2f8>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d00d      	beq.n	80028ae <HAL_GPIO_Init+0x1fa>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a46      	ldr	r2, [pc, #280]	; (80029b0 <HAL_GPIO_Init+0x2fc>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d007      	beq.n	80028aa <HAL_GPIO_Init+0x1f6>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a45      	ldr	r2, [pc, #276]	; (80029b4 <HAL_GPIO_Init+0x300>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d101      	bne.n	80028a6 <HAL_GPIO_Init+0x1f2>
 80028a2:	2304      	movs	r3, #4
 80028a4:	e008      	b.n	80028b8 <HAL_GPIO_Init+0x204>
 80028a6:	2307      	movs	r3, #7
 80028a8:	e006      	b.n	80028b8 <HAL_GPIO_Init+0x204>
 80028aa:	2303      	movs	r3, #3
 80028ac:	e004      	b.n	80028b8 <HAL_GPIO_Init+0x204>
 80028ae:	2302      	movs	r3, #2
 80028b0:	e002      	b.n	80028b8 <HAL_GPIO_Init+0x204>
 80028b2:	2301      	movs	r3, #1
 80028b4:	e000      	b.n	80028b8 <HAL_GPIO_Init+0x204>
 80028b6:	2300      	movs	r3, #0
 80028b8:	69fa      	ldr	r2, [r7, #28]
 80028ba:	f002 0203 	and.w	r2, r2, #3
 80028be:	0092      	lsls	r2, r2, #2
 80028c0:	4093      	lsls	r3, r2
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028c8:	4935      	ldr	r1, [pc, #212]	; (80029a0 <HAL_GPIO_Init+0x2ec>)
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	089b      	lsrs	r3, r3, #2
 80028ce:	3302      	adds	r3, #2
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028d6:	4b38      	ldr	r3, [pc, #224]	; (80029b8 <HAL_GPIO_Init+0x304>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	43db      	mvns	r3, r3
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	4013      	ands	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d003      	beq.n	80028fa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028fa:	4a2f      	ldr	r2, [pc, #188]	; (80029b8 <HAL_GPIO_Init+0x304>)
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002900:	4b2d      	ldr	r3, [pc, #180]	; (80029b8 <HAL_GPIO_Init+0x304>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	43db      	mvns	r3, r3
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	4013      	ands	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d003      	beq.n	8002924 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	4313      	orrs	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002924:	4a24      	ldr	r2, [pc, #144]	; (80029b8 <HAL_GPIO_Init+0x304>)
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800292a:	4b23      	ldr	r3, [pc, #140]	; (80029b8 <HAL_GPIO_Init+0x304>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	43db      	mvns	r3, r3
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	4013      	ands	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d003      	beq.n	800294e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	4313      	orrs	r3, r2
 800294c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800294e:	4a1a      	ldr	r2, [pc, #104]	; (80029b8 <HAL_GPIO_Init+0x304>)
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002954:	4b18      	ldr	r3, [pc, #96]	; (80029b8 <HAL_GPIO_Init+0x304>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	43db      	mvns	r3, r3
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	4013      	ands	r3, r2
 8002962:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d003      	beq.n	8002978 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	4313      	orrs	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002978:	4a0f      	ldr	r2, [pc, #60]	; (80029b8 <HAL_GPIO_Init+0x304>)
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	3301      	adds	r3, #1
 8002982:	61fb      	str	r3, [r7, #28]
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	2b0f      	cmp	r3, #15
 8002988:	f67f aea2 	bls.w	80026d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800298c:	bf00      	nop
 800298e:	bf00      	nop
 8002990:	3724      	adds	r7, #36	; 0x24
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	40023800 	.word	0x40023800
 80029a0:	40013800 	.word	0x40013800
 80029a4:	40020000 	.word	0x40020000
 80029a8:	40020400 	.word	0x40020400
 80029ac:	40020800 	.word	0x40020800
 80029b0:	40020c00 	.word	0x40020c00
 80029b4:	40021000 	.word	0x40021000
 80029b8:	40013c00 	.word	0x40013c00

080029bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d101      	bne.n	80029ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e267      	b.n	8002e9e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d075      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029da:	4b88      	ldr	r3, [pc, #544]	; (8002bfc <HAL_RCC_OscConfig+0x240>)
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f003 030c 	and.w	r3, r3, #12
 80029e2:	2b04      	cmp	r3, #4
 80029e4:	d00c      	beq.n	8002a00 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029e6:	4b85      	ldr	r3, [pc, #532]	; (8002bfc <HAL_RCC_OscConfig+0x240>)
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029ee:	2b08      	cmp	r3, #8
 80029f0:	d112      	bne.n	8002a18 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029f2:	4b82      	ldr	r3, [pc, #520]	; (8002bfc <HAL_RCC_OscConfig+0x240>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029fe:	d10b      	bne.n	8002a18 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a00:	4b7e      	ldr	r3, [pc, #504]	; (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d05b      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x108>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d157      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e242      	b.n	8002e9e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a20:	d106      	bne.n	8002a30 <HAL_RCC_OscConfig+0x74>
 8002a22:	4b76      	ldr	r3, [pc, #472]	; (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a75      	ldr	r2, [pc, #468]	; (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002a28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a2c:	6013      	str	r3, [r2, #0]
 8002a2e:	e01d      	b.n	8002a6c <HAL_RCC_OscConfig+0xb0>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a38:	d10c      	bne.n	8002a54 <HAL_RCC_OscConfig+0x98>
 8002a3a:	4b70      	ldr	r3, [pc, #448]	; (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a6f      	ldr	r2, [pc, #444]	; (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002a40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a44:	6013      	str	r3, [r2, #0]
 8002a46:	4b6d      	ldr	r3, [pc, #436]	; (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a6c      	ldr	r2, [pc, #432]	; (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002a4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a50:	6013      	str	r3, [r2, #0]
 8002a52:	e00b      	b.n	8002a6c <HAL_RCC_OscConfig+0xb0>
 8002a54:	4b69      	ldr	r3, [pc, #420]	; (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a68      	ldr	r2, [pc, #416]	; (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002a5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a5e:	6013      	str	r3, [r2, #0]
 8002a60:	4b66      	ldr	r3, [pc, #408]	; (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a65      	ldr	r2, [pc, #404]	; (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002a66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d013      	beq.n	8002a9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a74:	f7ff fd08 	bl	8002488 <HAL_GetTick>
 8002a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a7a:	e008      	b.n	8002a8e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a7c:	f7ff fd04 	bl	8002488 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b64      	cmp	r3, #100	; 0x64
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e207      	b.n	8002e9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a8e:	4b5b      	ldr	r3, [pc, #364]	; (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d0f0      	beq.n	8002a7c <HAL_RCC_OscConfig+0xc0>
 8002a9a:	e014      	b.n	8002ac6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a9c:	f7ff fcf4 	bl	8002488 <HAL_GetTick>
 8002aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002aa4:	f7ff fcf0 	bl	8002488 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b64      	cmp	r3, #100	; 0x64
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e1f3      	b.n	8002e9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ab6:	4b51      	ldr	r3, [pc, #324]	; (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1f0      	bne.n	8002aa4 <HAL_RCC_OscConfig+0xe8>
 8002ac2:	e000      	b.n	8002ac6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ac4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d063      	beq.n	8002b9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ad2:	4b4a      	ldr	r3, [pc, #296]	; (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f003 030c 	and.w	r3, r3, #12
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00b      	beq.n	8002af6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ade:	4b47      	ldr	r3, [pc, #284]	; (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ae6:	2b08      	cmp	r3, #8
 8002ae8:	d11c      	bne.n	8002b24 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aea:	4b44      	ldr	r3, [pc, #272]	; (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d116      	bne.n	8002b24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002af6:	4b41      	ldr	r3, [pc, #260]	; (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d005      	beq.n	8002b0e <HAL_RCC_OscConfig+0x152>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d001      	beq.n	8002b0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e1c7      	b.n	8002e9e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b0e:	4b3b      	ldr	r3, [pc, #236]	; (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	4937      	ldr	r1, [pc, #220]	; (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b22:	e03a      	b.n	8002b9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d020      	beq.n	8002b6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b2c:	4b34      	ldr	r3, [pc, #208]	; (8002c00 <HAL_RCC_OscConfig+0x244>)
 8002b2e:	2201      	movs	r2, #1
 8002b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b32:	f7ff fca9 	bl	8002488 <HAL_GetTick>
 8002b36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b38:	e008      	b.n	8002b4c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b3a:	f7ff fca5 	bl	8002488 <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d901      	bls.n	8002b4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e1a8      	b.n	8002e9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b4c:	4b2b      	ldr	r3, [pc, #172]	; (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0302 	and.w	r3, r3, #2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d0f0      	beq.n	8002b3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b58:	4b28      	ldr	r3, [pc, #160]	; (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	4925      	ldr	r1, [pc, #148]	; (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	600b      	str	r3, [r1, #0]
 8002b6c:	e015      	b.n	8002b9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b6e:	4b24      	ldr	r3, [pc, #144]	; (8002c00 <HAL_RCC_OscConfig+0x244>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b74:	f7ff fc88 	bl	8002488 <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b7a:	e008      	b.n	8002b8e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b7c:	f7ff fc84 	bl	8002488 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e187      	b.n	8002e9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b8e:	4b1b      	ldr	r3, [pc, #108]	; (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1f0      	bne.n	8002b7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0308 	and.w	r3, r3, #8
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d036      	beq.n	8002c14 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d016      	beq.n	8002bdc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bae:	4b15      	ldr	r3, [pc, #84]	; (8002c04 <HAL_RCC_OscConfig+0x248>)
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb4:	f7ff fc68 	bl	8002488 <HAL_GetTick>
 8002bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bba:	e008      	b.n	8002bce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bbc:	f7ff fc64 	bl	8002488 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e167      	b.n	8002e9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bce:	4b0b      	ldr	r3, [pc, #44]	; (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002bd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d0f0      	beq.n	8002bbc <HAL_RCC_OscConfig+0x200>
 8002bda:	e01b      	b.n	8002c14 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bdc:	4b09      	ldr	r3, [pc, #36]	; (8002c04 <HAL_RCC_OscConfig+0x248>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002be2:	f7ff fc51 	bl	8002488 <HAL_GetTick>
 8002be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002be8:	e00e      	b.n	8002c08 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bea:	f7ff fc4d 	bl	8002488 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d907      	bls.n	8002c08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e150      	b.n	8002e9e <HAL_RCC_OscConfig+0x4e2>
 8002bfc:	40023800 	.word	0x40023800
 8002c00:	42470000 	.word	0x42470000
 8002c04:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c08:	4b88      	ldr	r3, [pc, #544]	; (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002c0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c0c:	f003 0302 	and.w	r3, r3, #2
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1ea      	bne.n	8002bea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0304 	and.w	r3, r3, #4
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f000 8097 	beq.w	8002d50 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c22:	2300      	movs	r3, #0
 8002c24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c26:	4b81      	ldr	r3, [pc, #516]	; (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d10f      	bne.n	8002c52 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c32:	2300      	movs	r3, #0
 8002c34:	60bb      	str	r3, [r7, #8]
 8002c36:	4b7d      	ldr	r3, [pc, #500]	; (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3a:	4a7c      	ldr	r2, [pc, #496]	; (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c40:	6413      	str	r3, [r2, #64]	; 0x40
 8002c42:	4b7a      	ldr	r3, [pc, #488]	; (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c4a:	60bb      	str	r3, [r7, #8]
 8002c4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c52:	4b77      	ldr	r3, [pc, #476]	; (8002e30 <HAL_RCC_OscConfig+0x474>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d118      	bne.n	8002c90 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c5e:	4b74      	ldr	r3, [pc, #464]	; (8002e30 <HAL_RCC_OscConfig+0x474>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a73      	ldr	r2, [pc, #460]	; (8002e30 <HAL_RCC_OscConfig+0x474>)
 8002c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c6a:	f7ff fc0d 	bl	8002488 <HAL_GetTick>
 8002c6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c70:	e008      	b.n	8002c84 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c72:	f7ff fc09 	bl	8002488 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e10c      	b.n	8002e9e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c84:	4b6a      	ldr	r3, [pc, #424]	; (8002e30 <HAL_RCC_OscConfig+0x474>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d0f0      	beq.n	8002c72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d106      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x2ea>
 8002c98:	4b64      	ldr	r3, [pc, #400]	; (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c9c:	4a63      	ldr	r2, [pc, #396]	; (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002c9e:	f043 0301 	orr.w	r3, r3, #1
 8002ca2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ca4:	e01c      	b.n	8002ce0 <HAL_RCC_OscConfig+0x324>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	2b05      	cmp	r3, #5
 8002cac:	d10c      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x30c>
 8002cae:	4b5f      	ldr	r3, [pc, #380]	; (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb2:	4a5e      	ldr	r2, [pc, #376]	; (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002cb4:	f043 0304 	orr.w	r3, r3, #4
 8002cb8:	6713      	str	r3, [r2, #112]	; 0x70
 8002cba:	4b5c      	ldr	r3, [pc, #368]	; (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cbe:	4a5b      	ldr	r2, [pc, #364]	; (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002cc0:	f043 0301 	orr.w	r3, r3, #1
 8002cc4:	6713      	str	r3, [r2, #112]	; 0x70
 8002cc6:	e00b      	b.n	8002ce0 <HAL_RCC_OscConfig+0x324>
 8002cc8:	4b58      	ldr	r3, [pc, #352]	; (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ccc:	4a57      	ldr	r2, [pc, #348]	; (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002cce:	f023 0301 	bic.w	r3, r3, #1
 8002cd2:	6713      	str	r3, [r2, #112]	; 0x70
 8002cd4:	4b55      	ldr	r3, [pc, #340]	; (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd8:	4a54      	ldr	r2, [pc, #336]	; (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002cda:	f023 0304 	bic.w	r3, r3, #4
 8002cde:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d015      	beq.n	8002d14 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce8:	f7ff fbce 	bl	8002488 <HAL_GetTick>
 8002cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cee:	e00a      	b.n	8002d06 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cf0:	f7ff fbca 	bl	8002488 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e0cb      	b.n	8002e9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d06:	4b49      	ldr	r3, [pc, #292]	; (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d0ee      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x334>
 8002d12:	e014      	b.n	8002d3e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d14:	f7ff fbb8 	bl	8002488 <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d1a:	e00a      	b.n	8002d32 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d1c:	f7ff fbb4 	bl	8002488 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e0b5      	b.n	8002e9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d32:	4b3e      	ldr	r3, [pc, #248]	; (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1ee      	bne.n	8002d1c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d3e:	7dfb      	ldrb	r3, [r7, #23]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d105      	bne.n	8002d50 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d44:	4b39      	ldr	r3, [pc, #228]	; (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d48:	4a38      	ldr	r2, [pc, #224]	; (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002d4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d4e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f000 80a1 	beq.w	8002e9c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d5a:	4b34      	ldr	r3, [pc, #208]	; (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f003 030c 	and.w	r3, r3, #12
 8002d62:	2b08      	cmp	r3, #8
 8002d64:	d05c      	beq.n	8002e20 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d141      	bne.n	8002df2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d6e:	4b31      	ldr	r3, [pc, #196]	; (8002e34 <HAL_RCC_OscConfig+0x478>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d74:	f7ff fb88 	bl	8002488 <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d7c:	f7ff fb84 	bl	8002488 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e087      	b.n	8002e9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d8e:	4b27      	ldr	r3, [pc, #156]	; (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1f0      	bne.n	8002d7c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	69da      	ldr	r2, [r3, #28]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	431a      	orrs	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da8:	019b      	lsls	r3, r3, #6
 8002daa:	431a      	orrs	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db0:	085b      	lsrs	r3, r3, #1
 8002db2:	3b01      	subs	r3, #1
 8002db4:	041b      	lsls	r3, r3, #16
 8002db6:	431a      	orrs	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dbc:	061b      	lsls	r3, r3, #24
 8002dbe:	491b      	ldr	r1, [pc, #108]	; (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dc4:	4b1b      	ldr	r3, [pc, #108]	; (8002e34 <HAL_RCC_OscConfig+0x478>)
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dca:	f7ff fb5d 	bl	8002488 <HAL_GetTick>
 8002dce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dd0:	e008      	b.n	8002de4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dd2:	f7ff fb59 	bl	8002488 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e05c      	b.n	8002e9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002de4:	4b11      	ldr	r3, [pc, #68]	; (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d0f0      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x416>
 8002df0:	e054      	b.n	8002e9c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002df2:	4b10      	ldr	r3, [pc, #64]	; (8002e34 <HAL_RCC_OscConfig+0x478>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df8:	f7ff fb46 	bl	8002488 <HAL_GetTick>
 8002dfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dfe:	e008      	b.n	8002e12 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e00:	f7ff fb42 	bl	8002488 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e045      	b.n	8002e9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e12:	4b06      	ldr	r3, [pc, #24]	; (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1f0      	bne.n	8002e00 <HAL_RCC_OscConfig+0x444>
 8002e1e:	e03d      	b.n	8002e9c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d107      	bne.n	8002e38 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e038      	b.n	8002e9e <HAL_RCC_OscConfig+0x4e2>
 8002e2c:	40023800 	.word	0x40023800
 8002e30:	40007000 	.word	0x40007000
 8002e34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e38:	4b1b      	ldr	r3, [pc, #108]	; (8002ea8 <HAL_RCC_OscConfig+0x4ec>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d028      	beq.n	8002e98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d121      	bne.n	8002e98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d11a      	bne.n	8002e98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e68:	4013      	ands	r3, r2
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d111      	bne.n	8002e98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7e:	085b      	lsrs	r3, r3, #1
 8002e80:	3b01      	subs	r3, #1
 8002e82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d107      	bne.n	8002e98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d001      	beq.n	8002e9c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e000      	b.n	8002e9e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3718      	adds	r7, #24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40023800 	.word	0x40023800

08002eac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d101      	bne.n	8002ec0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e0cc      	b.n	800305a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ec0:	4b68      	ldr	r3, [pc, #416]	; (8003064 <HAL_RCC_ClockConfig+0x1b8>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0307 	and.w	r3, r3, #7
 8002ec8:	683a      	ldr	r2, [r7, #0]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d90c      	bls.n	8002ee8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ece:	4b65      	ldr	r3, [pc, #404]	; (8003064 <HAL_RCC_ClockConfig+0x1b8>)
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	b2d2      	uxtb	r2, r2
 8002ed4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ed6:	4b63      	ldr	r3, [pc, #396]	; (8003064 <HAL_RCC_ClockConfig+0x1b8>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0307 	and.w	r3, r3, #7
 8002ede:	683a      	ldr	r2, [r7, #0]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d001      	beq.n	8002ee8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e0b8      	b.n	800305a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d020      	beq.n	8002f36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0304 	and.w	r3, r3, #4
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d005      	beq.n	8002f0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f00:	4b59      	ldr	r3, [pc, #356]	; (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	4a58      	ldr	r2, [pc, #352]	; (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002f06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f0a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0308 	and.w	r3, r3, #8
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d005      	beq.n	8002f24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f18:	4b53      	ldr	r3, [pc, #332]	; (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	4a52      	ldr	r2, [pc, #328]	; (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f24:	4b50      	ldr	r3, [pc, #320]	; (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	494d      	ldr	r1, [pc, #308]	; (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d044      	beq.n	8002fcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d107      	bne.n	8002f5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f4a:	4b47      	ldr	r3, [pc, #284]	; (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d119      	bne.n	8002f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e07f      	b.n	800305a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d003      	beq.n	8002f6a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f66:	2b03      	cmp	r3, #3
 8002f68:	d107      	bne.n	8002f7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f6a:	4b3f      	ldr	r3, [pc, #252]	; (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d109      	bne.n	8002f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e06f      	b.n	800305a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f7a:	4b3b      	ldr	r3, [pc, #236]	; (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e067      	b.n	800305a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f8a:	4b37      	ldr	r3, [pc, #220]	; (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f023 0203 	bic.w	r2, r3, #3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	4934      	ldr	r1, [pc, #208]	; (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f9c:	f7ff fa74 	bl	8002488 <HAL_GetTick>
 8002fa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fa2:	e00a      	b.n	8002fba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fa4:	f7ff fa70 	bl	8002488 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e04f      	b.n	800305a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fba:	4b2b      	ldr	r3, [pc, #172]	; (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f003 020c 	and.w	r2, r3, #12
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d1eb      	bne.n	8002fa4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fcc:	4b25      	ldr	r3, [pc, #148]	; (8003064 <HAL_RCC_ClockConfig+0x1b8>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0307 	and.w	r3, r3, #7
 8002fd4:	683a      	ldr	r2, [r7, #0]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d20c      	bcs.n	8002ff4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fda:	4b22      	ldr	r3, [pc, #136]	; (8003064 <HAL_RCC_ClockConfig+0x1b8>)
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	b2d2      	uxtb	r2, r2
 8002fe0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fe2:	4b20      	ldr	r3, [pc, #128]	; (8003064 <HAL_RCC_ClockConfig+0x1b8>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0307 	and.w	r3, r3, #7
 8002fea:	683a      	ldr	r2, [r7, #0]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d001      	beq.n	8002ff4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e032      	b.n	800305a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0304 	and.w	r3, r3, #4
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d008      	beq.n	8003012 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003000:	4b19      	ldr	r3, [pc, #100]	; (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	4916      	ldr	r1, [pc, #88]	; (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 800300e:	4313      	orrs	r3, r2
 8003010:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0308 	and.w	r3, r3, #8
 800301a:	2b00      	cmp	r3, #0
 800301c:	d009      	beq.n	8003032 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800301e:	4b12      	ldr	r3, [pc, #72]	; (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	490e      	ldr	r1, [pc, #56]	; (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 800302e:	4313      	orrs	r3, r2
 8003030:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003032:	f000 f821 	bl	8003078 <HAL_RCC_GetSysClockFreq>
 8003036:	4602      	mov	r2, r0
 8003038:	4b0b      	ldr	r3, [pc, #44]	; (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	091b      	lsrs	r3, r3, #4
 800303e:	f003 030f 	and.w	r3, r3, #15
 8003042:	490a      	ldr	r1, [pc, #40]	; (800306c <HAL_RCC_ClockConfig+0x1c0>)
 8003044:	5ccb      	ldrb	r3, [r1, r3]
 8003046:	fa22 f303 	lsr.w	r3, r2, r3
 800304a:	4a09      	ldr	r2, [pc, #36]	; (8003070 <HAL_RCC_ClockConfig+0x1c4>)
 800304c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800304e:	4b09      	ldr	r3, [pc, #36]	; (8003074 <HAL_RCC_ClockConfig+0x1c8>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4618      	mov	r0, r3
 8003054:	f7ff f9d4 	bl	8002400 <HAL_InitTick>

  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	40023c00 	.word	0x40023c00
 8003068:	40023800 	.word	0x40023800
 800306c:	08003c5c 	.word	0x08003c5c
 8003070:	2000006c 	.word	0x2000006c
 8003074:	20000070 	.word	0x20000070

08003078 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003078:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800307c:	b094      	sub	sp, #80	; 0x50
 800307e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003080:	2300      	movs	r3, #0
 8003082:	647b      	str	r3, [r7, #68]	; 0x44
 8003084:	2300      	movs	r3, #0
 8003086:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003088:	2300      	movs	r3, #0
 800308a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800308c:	2300      	movs	r3, #0
 800308e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003090:	4b79      	ldr	r3, [pc, #484]	; (8003278 <HAL_RCC_GetSysClockFreq+0x200>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f003 030c 	and.w	r3, r3, #12
 8003098:	2b08      	cmp	r3, #8
 800309a:	d00d      	beq.n	80030b8 <HAL_RCC_GetSysClockFreq+0x40>
 800309c:	2b08      	cmp	r3, #8
 800309e:	f200 80e1 	bhi.w	8003264 <HAL_RCC_GetSysClockFreq+0x1ec>
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d002      	beq.n	80030ac <HAL_RCC_GetSysClockFreq+0x34>
 80030a6:	2b04      	cmp	r3, #4
 80030a8:	d003      	beq.n	80030b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80030aa:	e0db      	b.n	8003264 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030ac:	4b73      	ldr	r3, [pc, #460]	; (800327c <HAL_RCC_GetSysClockFreq+0x204>)
 80030ae:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80030b0:	e0db      	b.n	800326a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030b2:	4b73      	ldr	r3, [pc, #460]	; (8003280 <HAL_RCC_GetSysClockFreq+0x208>)
 80030b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030b6:	e0d8      	b.n	800326a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030b8:	4b6f      	ldr	r3, [pc, #444]	; (8003278 <HAL_RCC_GetSysClockFreq+0x200>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030c0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030c2:	4b6d      	ldr	r3, [pc, #436]	; (8003278 <HAL_RCC_GetSysClockFreq+0x200>)
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d063      	beq.n	8003196 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030ce:	4b6a      	ldr	r3, [pc, #424]	; (8003278 <HAL_RCC_GetSysClockFreq+0x200>)
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	099b      	lsrs	r3, r3, #6
 80030d4:	2200      	movs	r2, #0
 80030d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80030d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80030da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030e0:	633b      	str	r3, [r7, #48]	; 0x30
 80030e2:	2300      	movs	r3, #0
 80030e4:	637b      	str	r3, [r7, #52]	; 0x34
 80030e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80030ea:	4622      	mov	r2, r4
 80030ec:	462b      	mov	r3, r5
 80030ee:	f04f 0000 	mov.w	r0, #0
 80030f2:	f04f 0100 	mov.w	r1, #0
 80030f6:	0159      	lsls	r1, r3, #5
 80030f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030fc:	0150      	lsls	r0, r2, #5
 80030fe:	4602      	mov	r2, r0
 8003100:	460b      	mov	r3, r1
 8003102:	4621      	mov	r1, r4
 8003104:	1a51      	subs	r1, r2, r1
 8003106:	6139      	str	r1, [r7, #16]
 8003108:	4629      	mov	r1, r5
 800310a:	eb63 0301 	sbc.w	r3, r3, r1
 800310e:	617b      	str	r3, [r7, #20]
 8003110:	f04f 0200 	mov.w	r2, #0
 8003114:	f04f 0300 	mov.w	r3, #0
 8003118:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800311c:	4659      	mov	r1, fp
 800311e:	018b      	lsls	r3, r1, #6
 8003120:	4651      	mov	r1, sl
 8003122:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003126:	4651      	mov	r1, sl
 8003128:	018a      	lsls	r2, r1, #6
 800312a:	4651      	mov	r1, sl
 800312c:	ebb2 0801 	subs.w	r8, r2, r1
 8003130:	4659      	mov	r1, fp
 8003132:	eb63 0901 	sbc.w	r9, r3, r1
 8003136:	f04f 0200 	mov.w	r2, #0
 800313a:	f04f 0300 	mov.w	r3, #0
 800313e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003142:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003146:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800314a:	4690      	mov	r8, r2
 800314c:	4699      	mov	r9, r3
 800314e:	4623      	mov	r3, r4
 8003150:	eb18 0303 	adds.w	r3, r8, r3
 8003154:	60bb      	str	r3, [r7, #8]
 8003156:	462b      	mov	r3, r5
 8003158:	eb49 0303 	adc.w	r3, r9, r3
 800315c:	60fb      	str	r3, [r7, #12]
 800315e:	f04f 0200 	mov.w	r2, #0
 8003162:	f04f 0300 	mov.w	r3, #0
 8003166:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800316a:	4629      	mov	r1, r5
 800316c:	024b      	lsls	r3, r1, #9
 800316e:	4621      	mov	r1, r4
 8003170:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003174:	4621      	mov	r1, r4
 8003176:	024a      	lsls	r2, r1, #9
 8003178:	4610      	mov	r0, r2
 800317a:	4619      	mov	r1, r3
 800317c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800317e:	2200      	movs	r2, #0
 8003180:	62bb      	str	r3, [r7, #40]	; 0x28
 8003182:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003184:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003188:	f7fd fb34 	bl	80007f4 <__aeabi_uldivmod>
 800318c:	4602      	mov	r2, r0
 800318e:	460b      	mov	r3, r1
 8003190:	4613      	mov	r3, r2
 8003192:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003194:	e058      	b.n	8003248 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003196:	4b38      	ldr	r3, [pc, #224]	; (8003278 <HAL_RCC_GetSysClockFreq+0x200>)
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	099b      	lsrs	r3, r3, #6
 800319c:	2200      	movs	r2, #0
 800319e:	4618      	mov	r0, r3
 80031a0:	4611      	mov	r1, r2
 80031a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80031a6:	623b      	str	r3, [r7, #32]
 80031a8:	2300      	movs	r3, #0
 80031aa:	627b      	str	r3, [r7, #36]	; 0x24
 80031ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80031b0:	4642      	mov	r2, r8
 80031b2:	464b      	mov	r3, r9
 80031b4:	f04f 0000 	mov.w	r0, #0
 80031b8:	f04f 0100 	mov.w	r1, #0
 80031bc:	0159      	lsls	r1, r3, #5
 80031be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031c2:	0150      	lsls	r0, r2, #5
 80031c4:	4602      	mov	r2, r0
 80031c6:	460b      	mov	r3, r1
 80031c8:	4641      	mov	r1, r8
 80031ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80031ce:	4649      	mov	r1, r9
 80031d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80031d4:	f04f 0200 	mov.w	r2, #0
 80031d8:	f04f 0300 	mov.w	r3, #0
 80031dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80031e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80031e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80031e8:	ebb2 040a 	subs.w	r4, r2, sl
 80031ec:	eb63 050b 	sbc.w	r5, r3, fp
 80031f0:	f04f 0200 	mov.w	r2, #0
 80031f4:	f04f 0300 	mov.w	r3, #0
 80031f8:	00eb      	lsls	r3, r5, #3
 80031fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031fe:	00e2      	lsls	r2, r4, #3
 8003200:	4614      	mov	r4, r2
 8003202:	461d      	mov	r5, r3
 8003204:	4643      	mov	r3, r8
 8003206:	18e3      	adds	r3, r4, r3
 8003208:	603b      	str	r3, [r7, #0]
 800320a:	464b      	mov	r3, r9
 800320c:	eb45 0303 	adc.w	r3, r5, r3
 8003210:	607b      	str	r3, [r7, #4]
 8003212:	f04f 0200 	mov.w	r2, #0
 8003216:	f04f 0300 	mov.w	r3, #0
 800321a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800321e:	4629      	mov	r1, r5
 8003220:	028b      	lsls	r3, r1, #10
 8003222:	4621      	mov	r1, r4
 8003224:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003228:	4621      	mov	r1, r4
 800322a:	028a      	lsls	r2, r1, #10
 800322c:	4610      	mov	r0, r2
 800322e:	4619      	mov	r1, r3
 8003230:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003232:	2200      	movs	r2, #0
 8003234:	61bb      	str	r3, [r7, #24]
 8003236:	61fa      	str	r2, [r7, #28]
 8003238:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800323c:	f7fd fada 	bl	80007f4 <__aeabi_uldivmod>
 8003240:	4602      	mov	r2, r0
 8003242:	460b      	mov	r3, r1
 8003244:	4613      	mov	r3, r2
 8003246:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003248:	4b0b      	ldr	r3, [pc, #44]	; (8003278 <HAL_RCC_GetSysClockFreq+0x200>)
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	0c1b      	lsrs	r3, r3, #16
 800324e:	f003 0303 	and.w	r3, r3, #3
 8003252:	3301      	adds	r3, #1
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003258:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800325a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800325c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003260:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003262:	e002      	b.n	800326a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003264:	4b05      	ldr	r3, [pc, #20]	; (800327c <HAL_RCC_GetSysClockFreq+0x204>)
 8003266:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003268:	bf00      	nop
    }
  }
  return sysclockfreq;
 800326a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800326c:	4618      	mov	r0, r3
 800326e:	3750      	adds	r7, #80	; 0x50
 8003270:	46bd      	mov	sp, r7
 8003272:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003276:	bf00      	nop
 8003278:	40023800 	.word	0x40023800
 800327c:	00f42400 	.word	0x00f42400
 8003280:	007a1200 	.word	0x007a1200

08003284 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e041      	b.n	800331a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d106      	bne.n	80032b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f7fe ff08 	bl	80020c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2202      	movs	r2, #2
 80032b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	3304      	adds	r3, #4
 80032c0:	4619      	mov	r1, r3
 80032c2:	4610      	mov	r0, r2
 80032c4:	f000 f9a0 	bl	8003608 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3708      	adds	r7, #8
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
	...

08003324 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d109      	bne.n	8003348 <HAL_TIM_PWM_Start+0x24>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800333a:	b2db      	uxtb	r3, r3
 800333c:	2b01      	cmp	r3, #1
 800333e:	bf14      	ite	ne
 8003340:	2301      	movne	r3, #1
 8003342:	2300      	moveq	r3, #0
 8003344:	b2db      	uxtb	r3, r3
 8003346:	e022      	b.n	800338e <HAL_TIM_PWM_Start+0x6a>
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	2b04      	cmp	r3, #4
 800334c:	d109      	bne.n	8003362 <HAL_TIM_PWM_Start+0x3e>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b01      	cmp	r3, #1
 8003358:	bf14      	ite	ne
 800335a:	2301      	movne	r3, #1
 800335c:	2300      	moveq	r3, #0
 800335e:	b2db      	uxtb	r3, r3
 8003360:	e015      	b.n	800338e <HAL_TIM_PWM_Start+0x6a>
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	2b08      	cmp	r3, #8
 8003366:	d109      	bne.n	800337c <HAL_TIM_PWM_Start+0x58>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800336e:	b2db      	uxtb	r3, r3
 8003370:	2b01      	cmp	r3, #1
 8003372:	bf14      	ite	ne
 8003374:	2301      	movne	r3, #1
 8003376:	2300      	moveq	r3, #0
 8003378:	b2db      	uxtb	r3, r3
 800337a:	e008      	b.n	800338e <HAL_TIM_PWM_Start+0x6a>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003382:	b2db      	uxtb	r3, r3
 8003384:	2b01      	cmp	r3, #1
 8003386:	bf14      	ite	ne
 8003388:	2301      	movne	r3, #1
 800338a:	2300      	moveq	r3, #0
 800338c:	b2db      	uxtb	r3, r3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e068      	b.n	8003468 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d104      	bne.n	80033a6 <HAL_TIM_PWM_Start+0x82>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2202      	movs	r2, #2
 80033a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033a4:	e013      	b.n	80033ce <HAL_TIM_PWM_Start+0xaa>
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	2b04      	cmp	r3, #4
 80033aa:	d104      	bne.n	80033b6 <HAL_TIM_PWM_Start+0x92>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2202      	movs	r2, #2
 80033b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033b4:	e00b      	b.n	80033ce <HAL_TIM_PWM_Start+0xaa>
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	2b08      	cmp	r3, #8
 80033ba:	d104      	bne.n	80033c6 <HAL_TIM_PWM_Start+0xa2>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2202      	movs	r2, #2
 80033c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033c4:	e003      	b.n	80033ce <HAL_TIM_PWM_Start+0xaa>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2202      	movs	r2, #2
 80033ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2201      	movs	r2, #1
 80033d4:	6839      	ldr	r1, [r7, #0]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f000 fb22 	bl	8003a20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a23      	ldr	r2, [pc, #140]	; (8003470 <HAL_TIM_PWM_Start+0x14c>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d107      	bne.n	80033f6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033f4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a1d      	ldr	r2, [pc, #116]	; (8003470 <HAL_TIM_PWM_Start+0x14c>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d018      	beq.n	8003432 <HAL_TIM_PWM_Start+0x10e>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003408:	d013      	beq.n	8003432 <HAL_TIM_PWM_Start+0x10e>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a19      	ldr	r2, [pc, #100]	; (8003474 <HAL_TIM_PWM_Start+0x150>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d00e      	beq.n	8003432 <HAL_TIM_PWM_Start+0x10e>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a17      	ldr	r2, [pc, #92]	; (8003478 <HAL_TIM_PWM_Start+0x154>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d009      	beq.n	8003432 <HAL_TIM_PWM_Start+0x10e>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a16      	ldr	r2, [pc, #88]	; (800347c <HAL_TIM_PWM_Start+0x158>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d004      	beq.n	8003432 <HAL_TIM_PWM_Start+0x10e>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a14      	ldr	r2, [pc, #80]	; (8003480 <HAL_TIM_PWM_Start+0x15c>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d111      	bne.n	8003456 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f003 0307 	and.w	r3, r3, #7
 800343c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2b06      	cmp	r3, #6
 8003442:	d010      	beq.n	8003466 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f042 0201 	orr.w	r2, r2, #1
 8003452:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003454:	e007      	b.n	8003466 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f042 0201 	orr.w	r2, r2, #1
 8003464:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003466:	2300      	movs	r3, #0
}
 8003468:	4618      	mov	r0, r3
 800346a:	3710      	adds	r7, #16
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	40010000 	.word	0x40010000
 8003474:	40000400 	.word	0x40000400
 8003478:	40000800 	.word	0x40000800
 800347c:	40000c00 	.word	0x40000c00
 8003480:	40014000 	.word	0x40014000

08003484 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b086      	sub	sp, #24
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003490:	2300      	movs	r3, #0
 8003492:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800349a:	2b01      	cmp	r3, #1
 800349c:	d101      	bne.n	80034a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800349e:	2302      	movs	r3, #2
 80034a0:	e0ae      	b.n	8003600 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2201      	movs	r2, #1
 80034a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2b0c      	cmp	r3, #12
 80034ae:	f200 809f 	bhi.w	80035f0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80034b2:	a201      	add	r2, pc, #4	; (adr r2, 80034b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80034b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b8:	080034ed 	.word	0x080034ed
 80034bc:	080035f1 	.word	0x080035f1
 80034c0:	080035f1 	.word	0x080035f1
 80034c4:	080035f1 	.word	0x080035f1
 80034c8:	0800352d 	.word	0x0800352d
 80034cc:	080035f1 	.word	0x080035f1
 80034d0:	080035f1 	.word	0x080035f1
 80034d4:	080035f1 	.word	0x080035f1
 80034d8:	0800356f 	.word	0x0800356f
 80034dc:	080035f1 	.word	0x080035f1
 80034e0:	080035f1 	.word	0x080035f1
 80034e4:	080035f1 	.word	0x080035f1
 80034e8:	080035af 	.word	0x080035af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68b9      	ldr	r1, [r7, #8]
 80034f2:	4618      	mov	r0, r3
 80034f4:	f000 f908 	bl	8003708 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	699a      	ldr	r2, [r3, #24]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f042 0208 	orr.w	r2, r2, #8
 8003506:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	699a      	ldr	r2, [r3, #24]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 0204 	bic.w	r2, r2, #4
 8003516:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	6999      	ldr	r1, [r3, #24]
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	691a      	ldr	r2, [r3, #16]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	430a      	orrs	r2, r1
 8003528:	619a      	str	r2, [r3, #24]
      break;
 800352a:	e064      	b.n	80035f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68b9      	ldr	r1, [r7, #8]
 8003532:	4618      	mov	r0, r3
 8003534:	f000 f94e 	bl	80037d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	699a      	ldr	r2, [r3, #24]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003546:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	699a      	ldr	r2, [r3, #24]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003556:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6999      	ldr	r1, [r3, #24]
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	021a      	lsls	r2, r3, #8
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	430a      	orrs	r2, r1
 800356a:	619a      	str	r2, [r3, #24]
      break;
 800356c:	e043      	b.n	80035f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68b9      	ldr	r1, [r7, #8]
 8003574:	4618      	mov	r0, r3
 8003576:	f000 f999 	bl	80038ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	69da      	ldr	r2, [r3, #28]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f042 0208 	orr.w	r2, r2, #8
 8003588:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	69da      	ldr	r2, [r3, #28]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f022 0204 	bic.w	r2, r2, #4
 8003598:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	69d9      	ldr	r1, [r3, #28]
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	691a      	ldr	r2, [r3, #16]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	430a      	orrs	r2, r1
 80035aa:	61da      	str	r2, [r3, #28]
      break;
 80035ac:	e023      	b.n	80035f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68b9      	ldr	r1, [r7, #8]
 80035b4:	4618      	mov	r0, r3
 80035b6:	f000 f9e3 	bl	8003980 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	69da      	ldr	r2, [r3, #28]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	69da      	ldr	r2, [r3, #28]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	69d9      	ldr	r1, [r3, #28]
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	691b      	ldr	r3, [r3, #16]
 80035e4:	021a      	lsls	r2, r3, #8
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	430a      	orrs	r2, r1
 80035ec:	61da      	str	r2, [r3, #28]
      break;
 80035ee:	e002      	b.n	80035f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	75fb      	strb	r3, [r7, #23]
      break;
 80035f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80035fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003600:	4618      	mov	r0, r3
 8003602:	3718      	adds	r7, #24
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003608:	b480      	push	{r7}
 800360a:	b085      	sub	sp, #20
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a34      	ldr	r2, [pc, #208]	; (80036ec <TIM_Base_SetConfig+0xe4>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d00f      	beq.n	8003640 <TIM_Base_SetConfig+0x38>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003626:	d00b      	beq.n	8003640 <TIM_Base_SetConfig+0x38>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4a31      	ldr	r2, [pc, #196]	; (80036f0 <TIM_Base_SetConfig+0xe8>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d007      	beq.n	8003640 <TIM_Base_SetConfig+0x38>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	4a30      	ldr	r2, [pc, #192]	; (80036f4 <TIM_Base_SetConfig+0xec>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d003      	beq.n	8003640 <TIM_Base_SetConfig+0x38>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	4a2f      	ldr	r2, [pc, #188]	; (80036f8 <TIM_Base_SetConfig+0xf0>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d108      	bne.n	8003652 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003646:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	4313      	orrs	r3, r2
 8003650:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a25      	ldr	r2, [pc, #148]	; (80036ec <TIM_Base_SetConfig+0xe4>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d01b      	beq.n	8003692 <TIM_Base_SetConfig+0x8a>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003660:	d017      	beq.n	8003692 <TIM_Base_SetConfig+0x8a>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a22      	ldr	r2, [pc, #136]	; (80036f0 <TIM_Base_SetConfig+0xe8>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d013      	beq.n	8003692 <TIM_Base_SetConfig+0x8a>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a21      	ldr	r2, [pc, #132]	; (80036f4 <TIM_Base_SetConfig+0xec>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d00f      	beq.n	8003692 <TIM_Base_SetConfig+0x8a>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a20      	ldr	r2, [pc, #128]	; (80036f8 <TIM_Base_SetConfig+0xf0>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d00b      	beq.n	8003692 <TIM_Base_SetConfig+0x8a>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a1f      	ldr	r2, [pc, #124]	; (80036fc <TIM_Base_SetConfig+0xf4>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d007      	beq.n	8003692 <TIM_Base_SetConfig+0x8a>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a1e      	ldr	r2, [pc, #120]	; (8003700 <TIM_Base_SetConfig+0xf8>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d003      	beq.n	8003692 <TIM_Base_SetConfig+0x8a>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a1d      	ldr	r2, [pc, #116]	; (8003704 <TIM_Base_SetConfig+0xfc>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d108      	bne.n	80036a4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003698:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	689a      	ldr	r2, [r3, #8]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a08      	ldr	r2, [pc, #32]	; (80036ec <TIM_Base_SetConfig+0xe4>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d103      	bne.n	80036d8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	691a      	ldr	r2, [r3, #16]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	615a      	str	r2, [r3, #20]
}
 80036de:	bf00      	nop
 80036e0:	3714      	adds	r7, #20
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	40010000 	.word	0x40010000
 80036f0:	40000400 	.word	0x40000400
 80036f4:	40000800 	.word	0x40000800
 80036f8:	40000c00 	.word	0x40000c00
 80036fc:	40014000 	.word	0x40014000
 8003700:	40014400 	.word	0x40014400
 8003704:	40014800 	.word	0x40014800

08003708 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003708:	b480      	push	{r7}
 800370a:	b087      	sub	sp, #28
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a1b      	ldr	r3, [r3, #32]
 8003716:	f023 0201 	bic.w	r2, r3, #1
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a1b      	ldr	r3, [r3, #32]
 8003722:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003736:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f023 0303 	bic.w	r3, r3, #3
 800373e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	4313      	orrs	r3, r2
 8003748:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	f023 0302 	bic.w	r3, r3, #2
 8003750:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	697a      	ldr	r2, [r7, #20]
 8003758:	4313      	orrs	r3, r2
 800375a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a1c      	ldr	r2, [pc, #112]	; (80037d0 <TIM_OC1_SetConfig+0xc8>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d10c      	bne.n	800377e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	f023 0308 	bic.w	r3, r3, #8
 800376a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	697a      	ldr	r2, [r7, #20]
 8003772:	4313      	orrs	r3, r2
 8003774:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	f023 0304 	bic.w	r3, r3, #4
 800377c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a13      	ldr	r2, [pc, #76]	; (80037d0 <TIM_OC1_SetConfig+0xc8>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d111      	bne.n	80037aa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800378c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003794:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	4313      	orrs	r3, r2
 800379e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	693a      	ldr	r2, [r7, #16]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	685a      	ldr	r2, [r3, #4]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	697a      	ldr	r2, [r7, #20]
 80037c2:	621a      	str	r2, [r3, #32]
}
 80037c4:	bf00      	nop
 80037c6:	371c      	adds	r7, #28
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr
 80037d0:	40010000 	.word	0x40010000

080037d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b087      	sub	sp, #28
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a1b      	ldr	r3, [r3, #32]
 80037e2:	f023 0210 	bic.w	r2, r3, #16
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a1b      	ldr	r3, [r3, #32]
 80037ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003802:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800380a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	021b      	lsls	r3, r3, #8
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	4313      	orrs	r3, r2
 8003816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	f023 0320 	bic.w	r3, r3, #32
 800381e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	011b      	lsls	r3, r3, #4
 8003826:	697a      	ldr	r2, [r7, #20]
 8003828:	4313      	orrs	r3, r2
 800382a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a1e      	ldr	r2, [pc, #120]	; (80038a8 <TIM_OC2_SetConfig+0xd4>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d10d      	bne.n	8003850 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800383a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	011b      	lsls	r3, r3, #4
 8003842:	697a      	ldr	r2, [r7, #20]
 8003844:	4313      	orrs	r3, r2
 8003846:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800384e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a15      	ldr	r2, [pc, #84]	; (80038a8 <TIM_OC2_SetConfig+0xd4>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d113      	bne.n	8003880 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800385e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003866:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	695b      	ldr	r3, [r3, #20]
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	4313      	orrs	r3, r2
 8003872:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	693a      	ldr	r2, [r7, #16]
 800387c:	4313      	orrs	r3, r2
 800387e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	68fa      	ldr	r2, [r7, #12]
 800388a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	685a      	ldr	r2, [r3, #4]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	697a      	ldr	r2, [r7, #20]
 8003898:	621a      	str	r2, [r3, #32]
}
 800389a:	bf00      	nop
 800389c:	371c      	adds	r7, #28
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	40010000 	.word	0x40010000

080038ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b087      	sub	sp, #28
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	69db      	ldr	r3, [r3, #28]
 80038d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f023 0303 	bic.w	r3, r3, #3
 80038e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	021b      	lsls	r3, r3, #8
 80038fc:	697a      	ldr	r2, [r7, #20]
 80038fe:	4313      	orrs	r3, r2
 8003900:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a1d      	ldr	r2, [pc, #116]	; (800397c <TIM_OC3_SetConfig+0xd0>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d10d      	bne.n	8003926 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003910:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	021b      	lsls	r3, r3, #8
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	4313      	orrs	r3, r2
 800391c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003924:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a14      	ldr	r2, [pc, #80]	; (800397c <TIM_OC3_SetConfig+0xd0>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d113      	bne.n	8003956 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003934:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800393c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	011b      	lsls	r3, r3, #4
 8003944:	693a      	ldr	r2, [r7, #16]
 8003946:	4313      	orrs	r3, r2
 8003948:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	011b      	lsls	r3, r3, #4
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	4313      	orrs	r3, r2
 8003954:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	685a      	ldr	r2, [r3, #4]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	697a      	ldr	r2, [r7, #20]
 800396e:	621a      	str	r2, [r3, #32]
}
 8003970:	bf00      	nop
 8003972:	371c      	adds	r7, #28
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr
 800397c:	40010000 	.word	0x40010000

08003980 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003980:	b480      	push	{r7}
 8003982:	b087      	sub	sp, #28
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	69db      	ldr	r3, [r3, #28]
 80039a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	021b      	lsls	r3, r3, #8
 80039be:	68fa      	ldr	r2, [r7, #12]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	031b      	lsls	r3, r3, #12
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a10      	ldr	r2, [pc, #64]	; (8003a1c <TIM_OC4_SetConfig+0x9c>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d109      	bne.n	80039f4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	695b      	ldr	r3, [r3, #20]
 80039ec:	019b      	lsls	r3, r3, #6
 80039ee:	697a      	ldr	r2, [r7, #20]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	697a      	ldr	r2, [r7, #20]
 80039f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	685a      	ldr	r2, [r3, #4]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	693a      	ldr	r2, [r7, #16]
 8003a0c:	621a      	str	r2, [r3, #32]
}
 8003a0e:	bf00      	nop
 8003a10:	371c      	adds	r7, #28
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	40010000 	.word	0x40010000

08003a20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b087      	sub	sp, #28
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	f003 031f 	and.w	r3, r3, #31
 8003a32:	2201      	movs	r2, #1
 8003a34:	fa02 f303 	lsl.w	r3, r2, r3
 8003a38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6a1a      	ldr	r2, [r3, #32]
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	43db      	mvns	r3, r3
 8003a42:	401a      	ands	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6a1a      	ldr	r2, [r3, #32]
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	f003 031f 	and.w	r3, r3, #31
 8003a52:	6879      	ldr	r1, [r7, #4]
 8003a54:	fa01 f303 	lsl.w	r3, r1, r3
 8003a58:	431a      	orrs	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	621a      	str	r2, [r3, #32]
}
 8003a5e:	bf00      	nop
 8003a60:	371c      	adds	r7, #28
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
	...

08003a6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b085      	sub	sp, #20
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d101      	bne.n	8003a84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a80:	2302      	movs	r3, #2
 8003a82:	e050      	b.n	8003b26 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2202      	movs	r2, #2
 8003a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aaa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a1c      	ldr	r2, [pc, #112]	; (8003b34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d018      	beq.n	8003afa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ad0:	d013      	beq.n	8003afa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a18      	ldr	r2, [pc, #96]	; (8003b38 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d00e      	beq.n	8003afa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a16      	ldr	r2, [pc, #88]	; (8003b3c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d009      	beq.n	8003afa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a15      	ldr	r2, [pc, #84]	; (8003b40 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d004      	beq.n	8003afa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a13      	ldr	r2, [pc, #76]	; (8003b44 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d10c      	bne.n	8003b14 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	68ba      	ldr	r2, [r7, #8]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68ba      	ldr	r2, [r7, #8]
 8003b12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3714      	adds	r7, #20
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	40010000 	.word	0x40010000
 8003b38:	40000400 	.word	0x40000400
 8003b3c:	40000800 	.word	0x40000800
 8003b40:	40000c00 	.word	0x40000c00
 8003b44:	40014000 	.word	0x40014000

08003b48 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b085      	sub	sp, #20
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003b52:	2300      	movs	r3, #0
 8003b54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d101      	bne.n	8003b64 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003b60:	2302      	movs	r3, #2
 8003b62:	e03d      	b.n	8003be0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	695b      	ldr	r3, [r3, #20]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	69db      	ldr	r3, [r3, #28]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3714      	adds	r7, #20
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <__libc_init_array>:
 8003bec:	b570      	push	{r4, r5, r6, lr}
 8003bee:	4d0d      	ldr	r5, [pc, #52]	; (8003c24 <__libc_init_array+0x38>)
 8003bf0:	4c0d      	ldr	r4, [pc, #52]	; (8003c28 <__libc_init_array+0x3c>)
 8003bf2:	1b64      	subs	r4, r4, r5
 8003bf4:	10a4      	asrs	r4, r4, #2
 8003bf6:	2600      	movs	r6, #0
 8003bf8:	42a6      	cmp	r6, r4
 8003bfa:	d109      	bne.n	8003c10 <__libc_init_array+0x24>
 8003bfc:	4d0b      	ldr	r5, [pc, #44]	; (8003c2c <__libc_init_array+0x40>)
 8003bfe:	4c0c      	ldr	r4, [pc, #48]	; (8003c30 <__libc_init_array+0x44>)
 8003c00:	f000 f820 	bl	8003c44 <_init>
 8003c04:	1b64      	subs	r4, r4, r5
 8003c06:	10a4      	asrs	r4, r4, #2
 8003c08:	2600      	movs	r6, #0
 8003c0a:	42a6      	cmp	r6, r4
 8003c0c:	d105      	bne.n	8003c1a <__libc_init_array+0x2e>
 8003c0e:	bd70      	pop	{r4, r5, r6, pc}
 8003c10:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c14:	4798      	blx	r3
 8003c16:	3601      	adds	r6, #1
 8003c18:	e7ee      	b.n	8003bf8 <__libc_init_array+0xc>
 8003c1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c1e:	4798      	blx	r3
 8003c20:	3601      	adds	r6, #1
 8003c22:	e7f2      	b.n	8003c0a <__libc_init_array+0x1e>
 8003c24:	08003c74 	.word	0x08003c74
 8003c28:	08003c74 	.word	0x08003c74
 8003c2c:	08003c74 	.word	0x08003c74
 8003c30:	08003c78 	.word	0x08003c78

08003c34 <memset>:
 8003c34:	4402      	add	r2, r0
 8003c36:	4603      	mov	r3, r0
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d100      	bne.n	8003c3e <memset+0xa>
 8003c3c:	4770      	bx	lr
 8003c3e:	f803 1b01 	strb.w	r1, [r3], #1
 8003c42:	e7f9      	b.n	8003c38 <memset+0x4>

08003c44 <_init>:
 8003c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c46:	bf00      	nop
 8003c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c4a:	bc08      	pop	{r3}
 8003c4c:	469e      	mov	lr, r3
 8003c4e:	4770      	bx	lr

08003c50 <_fini>:
 8003c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c52:	bf00      	nop
 8003c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c56:	bc08      	pop	{r3}
 8003c58:	469e      	mov	lr, r3
 8003c5a:	4770      	bx	lr
